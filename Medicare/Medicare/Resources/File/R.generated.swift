//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 20 storyboards.
  struct storyboard {
    /// Storyboard `Category`.
    static let category = _R.storyboard.category()
    /// Storyboard `Coming`.
    static let coming = _R.storyboard.coming()
    /// Storyboard `CustomAlert`.
    static let customAlert = _R.storyboard.customAlert()
    /// Storyboard `Gift`.
    static let gift = _R.storyboard.gift()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MagazineSubscription`.
    static let magazineSubscription = _R.storyboard.magazineSubscription()
    /// Storyboard `Magazine`.
    static let magazine = _R.storyboard.magazine()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MyMenu`.
    static let myMenu = _R.storyboard.myMenu()
    /// Storyboard `Notification`.
    static let notification = _R.storyboard.notification()
    /// Storyboard `Point`.
    static let point = _R.storyboard.point()
    /// Storyboard `PresentApplication`.
    static let presentApplication = _R.storyboard.presentApplication()
    /// Storyboard `Registration`.
    static let registration = _R.storyboard.registration()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()
    /// Storyboard `Shopping`.
    static let shopping = _R.storyboard.shopping()
    /// Storyboard `Splash`.
    static let splash = _R.storyboard.splash()
    /// Storyboard `Startup`.
    static let startup = _R.storyboard.startup()
    /// Storyboard `Video`.
    static let video = _R.storyboard.video()
    /// Storyboard `Wellness`.
    static let wellness = _R.storyboard.wellness()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Category", bundle: ...)`
    static func category(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.category)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Coming", bundle: ...)`
    static func coming(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.coming)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CustomAlert", bundle: ...)`
    static func customAlert(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.customAlert)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Gift", bundle: ...)`
    static func gift(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.gift)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Magazine", bundle: ...)`
    static func magazine(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.magazine)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MagazineSubscription", bundle: ...)`
    static func magazineSubscription(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.magazineSubscription)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MyMenu", bundle: ...)`
    static func myMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myMenu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Notification", bundle: ...)`
    static func notification(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notification)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Point", bundle: ...)`
    static func point(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.point)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PresentApplication", bundle: ...)`
    static func presentApplication(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.presentApplication)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Registration", bundle: ...)`
    static func registration(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registration)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.setting)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Shopping", bundle: ...)`
    static func shopping(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.shopping)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Splash", bundle: ...)`
    static func splash(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splash)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Startup", bundle: ...)`
    static func startup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.startup)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Video", bundle: ...)`
    static func video(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.video)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Wellness", bundle: ...)`
    static func wellness(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.wellness)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 17 files.
  struct file {
    /// Resource file `GoogleService-Dev-Info.plist`.
    static let googleServiceDevInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Dev-Info", pathExtension: "plist")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `GoogleService-QA-Info.plist`.
    static let googleServiceQAInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-QA-Info", pathExtension: "plist")
    /// Resource file `Hiragino-Kaku-Gothic-Pro-W6.otf`.
    static let hiraginoKakuGothicProW6Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "Hiragino-Kaku-Gothic-Pro-W6", pathExtension: "otf")
    /// Resource file `Hiragino-Sans-GB-W3.otf`.
    static let hiraginoSansGBW3Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "Hiragino-Sans-GB-W3", pathExtension: "otf")
    /// Resource file `Hiragino-Sans-GB-W6.otf`.
    static let hiraginoSansGBW6Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "Hiragino-Sans-GB-W6", pathExtension: "otf")
    /// Resource file `SFUIText-Regular.ttf`.
    static let sfuiTextRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Regular", pathExtension: "ttf")
    /// Resource file `categories-list.json`.
    static let categoriesListJson = Rswift.FileResource(bundle: R.hostingBundle, name: "categories-list", pathExtension: "json")
    /// Resource file `change-personal-info.done.html`.
    static let changePersonalInfoDoneHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "change-personal-info.done", pathExtension: "html")
    /// Resource file `data-transfer.guides.html`.
    static let dataTransferGuidesHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "data-transfer.guides", pathExtension: "html")
    /// Resource file `empty-webview.html`.
    static let emptyWebviewHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "empty-webview", pathExtension: "html")
    /// Resource file `points-history.json`.
    static let pointsHistoryJson = Rswift.FileResource(bundle: R.hostingBundle, name: "points-history", pathExtension: "json")
    /// Resource file `prefectures-list.json`.
    static let prefecturesListJson = Rswift.FileResource(bundle: R.hostingBundle, name: "prefectures-list", pathExtension: "json")
    /// Resource file `present-application.done.html`.
    static let presentApplicationDoneHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "present-application.done", pathExtension: "html")
    /// Resource file `roboto.bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "roboto.bold", pathExtension: "ttf")
    /// Resource file `tags-list.json`.
    static let tagsListJson = Rswift.FileResource(bundle: R.hostingBundle, name: "tags-list", pathExtension: "json")
    /// Resource file `wellness-categories-list.json`.
    static let wellnessCategoriesListJson = Rswift.FileResource(bundle: R.hostingBundle, name: "wellness-categories-list", pathExtension: "json")

    /// `bundle.url(forResource: "GoogleService-Dev-Info", withExtension: "plist")`
    static func googleServiceDevInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceDevInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-QA-Info", withExtension: "plist")`
    static func googleServiceQAInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceQAInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Hiragino-Kaku-Gothic-Pro-W6", withExtension: "otf")`
    static func hiraginoKakuGothicProW6Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hiraginoKakuGothicProW6Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Hiragino-Sans-GB-W3", withExtension: "otf")`
    static func hiraginoSansGBW3Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hiraginoSansGBW3Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Hiragino-Sans-GB-W6", withExtension: "otf")`
    static func hiraginoSansGBW6Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hiraginoSansGBW6Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFUIText-Regular", withExtension: "ttf")`
    static func sfuiTextRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiTextRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "categories-list", withExtension: "json")`
    static func categoriesListJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.categoriesListJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "change-personal-info.done", withExtension: "html")`
    static func changePersonalInfoDoneHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.changePersonalInfoDoneHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "data-transfer.guides", withExtension: "html")`
    static func dataTransferGuidesHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dataTransferGuidesHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "empty-webview", withExtension: "html")`
    static func emptyWebviewHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emptyWebviewHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "points-history", withExtension: "json")`
    static func pointsHistoryJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pointsHistoryJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "prefectures-list", withExtension: "json")`
    static func prefecturesListJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.prefecturesListJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "present-application.done", withExtension: "html")`
    static func presentApplicationDoneHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.presentApplicationDoneHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "roboto.bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tags-list", withExtension: "json")`
    static func tagsListJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tagsListJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "wellness-categories-list", withExtension: "json")`
    static func wellnessCategoriesListJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wellnessCategoriesListJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 5 fonts.
  struct font: Rswift.Validatable {
    /// Font `HiraKakuPro-W6`.
    static let hiraKakuProW6 = Rswift.FontResource(fontName: "HiraKakuPro-W6")
    /// Font `HiraginoSansGB-W3`.
    static let hiraginoSansGBW3 = Rswift.FontResource(fontName: "HiraginoSansGB-W3")
    /// Font `HiraginoSansGB-W6`.
    static let hiraginoSansGBW6 = Rswift.FontResource(fontName: "HiraginoSansGB-W6")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `SFUIText-Regular`.
    static let sfuiTextRegular = Rswift.FontResource(fontName: "SFUIText-Regular")

    /// `UIFont(name: "HiraKakuPro-W6", size: ...)`
    static func hiraKakuProW6(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hiraKakuProW6, size: size)
    }

    /// `UIFont(name: "HiraginoSansGB-W3", size: ...)`
    static func hiraginoSansGBW3(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hiraginoSansGBW3, size: size)
    }

    /// `UIFont(name: "HiraginoSansGB-W6", size: ...)`
    static func hiraginoSansGBW6(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hiraginoSansGBW6, size: size)
    }

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "SFUIText-Regular", size: ...)`
    static func sfuiTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextRegular, size: size)
    }

    static func validate() throws {
      if R.font.hiraKakuProW6(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HiraKakuPro-W6' could not be loaded, is 'Hiragino-Kaku-Gothic-Pro-W6.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.hiraginoSansGBW3(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HiraginoSansGB-W3' could not be loaded, is 'Hiragino-Sans-GB-W3.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.hiraginoSansGBW6(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HiraginoSansGB-W6' could not be loaded, is 'Hiragino-Sans-GB-W6.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'roboto.bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Regular' could not be loaded, is 'SFUIText-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 50 images.
  struct image {
    /// Image `accessory_icon`.
    static let accessory_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "accessory_icon")
    /// Image `app_logo`.
    static let app_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "app_logo")
    /// Image `avatar`.
    static let avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar")
    /// Image `back_icon`.
    static let back_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_icon")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `copy`.
    static let copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "copy")
    /// Image `dropdown`.
    static let dropdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "dropdown")
    /// Image `fail-icon-alert`.
    static let failIconAlert = Rswift.ImageResource(bundle: R.hostingBundle, name: "fail-icon-alert")
    /// Image `favourite_icon`.
    static let favourite_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "favourite_icon")
    /// Image `gift_tab_icon`.
    static let gift_tab_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "gift_tab_icon")
    /// Image `gift_tab_selected_icon`.
    static let gift_tab_selected_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "gift_tab_selected_icon")
    /// Image `good_icon`.
    static let good_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "good_icon")
    /// Image `grant_point_alert`.
    static let grant_point_alert = Rswift.ImageResource(bundle: R.hostingBundle, name: "grant_point_alert")
    /// Image `health_tab_icon`.
    static let health_tab_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "health_tab_icon")
    /// Image `health_tab_selected_icon`.
    static let health_tab_selected_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "health_tab_selected_icon")
    /// Image `home_page_icon`.
    static let home_page_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_page_icon")
    /// Image `like_icon`.
    static let like_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "like_icon")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `magazine-intro`.
    static let magazineIntro = Rswift.ImageResource(bundle: R.hostingBundle, name: "magazine-intro")
    /// Image `magazine_tab_icon`.
    static let magazine_tab_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "magazine_tab_icon")
    /// Image `magazine_tab_selected_icon`.
    static let magazine_tab_selected_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "magazine_tab_selected_icon")
    /// Image `menu-change-user-info`.
    static let menuChangeUserInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-change-user-info")
    /// Image `menu-empty`.
    static let menuEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-empty")
    /// Image `menu-notification`.
    static let menuNotification = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-notification")
    /// Image `menu-point`.
    static let menuPoint = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-point")
    /// Image `menu-transfer`.
    static let menuTransfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-transfer")
    /// Image `my_page_icon`.
    static let my_page_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_page_icon")
    /// Image `not_enough_point`.
    static let not_enough_point = Rswift.ImageResource(bundle: R.hostingBundle, name: "not_enough_point")
    /// Image `pager_tab_line`.
    static let pager_tab_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "pager_tab_line")
    /// Image `play-icon`.
    static let playIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "play-icon")
    /// Image `qrcode`.
    static let qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode")
    /// Image `ranking_top1`.
    static let ranking_top1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ranking_top1")
    /// Image `ranking_top2`.
    static let ranking_top2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ranking_top2")
    /// Image `ranking_top3`.
    static let ranking_top3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ranking_top3")
    /// Image `ranking_top4`.
    static let ranking_top4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ranking_top4")
    /// Image `right-arrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-arrow")
    /// Image `scan-qr-code`.
    static let scanQrCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan-qr-code")
    /// Image `signin_success_alert`.
    static let signin_success_alert = Rswift.ImageResource(bundle: R.hostingBundle, name: "signin_success_alert")
    /// Image `signup_success_alert`.
    static let signup_success_alert = Rswift.ImageResource(bundle: R.hostingBundle, name: "signup_success_alert")
    /// Image `splash_logo`.
    static let splash_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_logo")
    /// Image `success-alert`.
    static let successAlert = Rswift.ImageResource(bundle: R.hostingBundle, name: "success-alert")
    /// Image `unfavourite_icon`.
    static let unfavourite_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "unfavourite_icon")
    /// Image `ungood_icon`.
    static let ungood_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ungood_icon")
    /// Image `united-states-of-america`.
    static let unitedStatesOfAmerica = Rswift.ImageResource(bundle: R.hostingBundle, name: "united-states-of-america")
    /// Image `unlike_icon`.
    static let unlike_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlike_icon")
    /// Image `unregister_icon`.
    static let unregister_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "unregister_icon")
    /// Image `video_channel_icon`.
    static let video_channel_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_channel_icon")
    /// Image `video_tab_icon`.
    static let video_tab_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_tab_icon")
    /// Image `video_tab_selected_icon`.
    static let video_tab_selected_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_tab_selected_icon")
    /// Image `vietnam`.
    static let vietnam = Rswift.ImageResource(bundle: R.hostingBundle, name: "vietnam")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accessory_icon", bundle: ..., traitCollection: ...)`
    static func accessory_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accessory_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "app_logo", bundle: ..., traitCollection: ...)`
    static func app_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_icon", bundle: ..., traitCollection: ...)`
    static func back_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "copy", bundle: ..., traitCollection: ...)`
    static func copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dropdown", bundle: ..., traitCollection: ...)`
    static func dropdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropdown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fail-icon-alert", bundle: ..., traitCollection: ...)`
    static func failIconAlert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.failIconAlert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favourite_icon", bundle: ..., traitCollection: ...)`
    static func favourite_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favourite_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gift_tab_icon", bundle: ..., traitCollection: ...)`
    static func gift_tab_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gift_tab_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gift_tab_selected_icon", bundle: ..., traitCollection: ...)`
    static func gift_tab_selected_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gift_tab_selected_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "good_icon", bundle: ..., traitCollection: ...)`
    static func good_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grant_point_alert", bundle: ..., traitCollection: ...)`
    static func grant_point_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grant_point_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "health_tab_icon", bundle: ..., traitCollection: ...)`
    static func health_tab_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.health_tab_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "health_tab_selected_icon", bundle: ..., traitCollection: ...)`
    static func health_tab_selected_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.health_tab_selected_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_page_icon", bundle: ..., traitCollection: ...)`
    static func home_page_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_page_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like_icon", bundle: ..., traitCollection: ...)`
    static func like_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magazine-intro", bundle: ..., traitCollection: ...)`
    static func magazineIntro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magazineIntro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magazine_tab_icon", bundle: ..., traitCollection: ...)`
    static func magazine_tab_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magazine_tab_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magazine_tab_selected_icon", bundle: ..., traitCollection: ...)`
    static func magazine_tab_selected_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magazine_tab_selected_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-change-user-info", bundle: ..., traitCollection: ...)`
    static func menuChangeUserInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuChangeUserInfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-empty", bundle: ..., traitCollection: ...)`
    static func menuEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuEmpty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-notification", bundle: ..., traitCollection: ...)`
    static func menuNotification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuNotification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-point", bundle: ..., traitCollection: ...)`
    static func menuPoint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuPoint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-transfer", bundle: ..., traitCollection: ...)`
    static func menuTransfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuTransfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_page_icon", bundle: ..., traitCollection: ...)`
    static func my_page_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_page_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "not_enough_point", bundle: ..., traitCollection: ...)`
    static func not_enough_point(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.not_enough_point, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pager_tab_line", bundle: ..., traitCollection: ...)`
    static func pager_tab_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pager_tab_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play-icon", bundle: ..., traitCollection: ...)`
    static func playIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode", bundle: ..., traitCollection: ...)`
    static func qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ranking_top1", bundle: ..., traitCollection: ...)`
    static func ranking_top1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ranking_top1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ranking_top2", bundle: ..., traitCollection: ...)`
    static func ranking_top2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ranking_top2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ranking_top3", bundle: ..., traitCollection: ...)`
    static func ranking_top3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ranking_top3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ranking_top4", bundle: ..., traitCollection: ...)`
    static func ranking_top4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ranking_top4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right-arrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan-qr-code", bundle: ..., traitCollection: ...)`
    static func scanQrCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanQrCode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "signin_success_alert", bundle: ..., traitCollection: ...)`
    static func signin_success_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signin_success_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "signup_success_alert", bundle: ..., traitCollection: ...)`
    static func signup_success_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signup_success_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash_logo", bundle: ..., traitCollection: ...)`
    static func splash_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "success-alert", bundle: ..., traitCollection: ...)`
    static func successAlert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.successAlert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unfavourite_icon", bundle: ..., traitCollection: ...)`
    static func unfavourite_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unfavourite_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ungood_icon", bundle: ..., traitCollection: ...)`
    static func ungood_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ungood_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "united-states-of-america", bundle: ..., traitCollection: ...)`
    static func unitedStatesOfAmerica(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unitedStatesOfAmerica, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unlike_icon", bundle: ..., traitCollection: ...)`
    static func unlike_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlike_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unregister_icon", bundle: ..., traitCollection: ...)`
    static func unregister_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unregister_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_channel_icon", bundle: ..., traitCollection: ...)`
    static func video_channel_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_channel_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_tab_icon", bundle: ..., traitCollection: ...)`
    static func video_tab_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_tab_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_tab_selected_icon", bundle: ..., traitCollection: ...)`
    static func video_tab_selected_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_tab_selected_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vietnam", bundle: ..., traitCollection: ...)`
    static func vietnam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vietnam, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 19 nibs.
  struct nib {
    /// Nib `CategoryCollectionViewCell`.
    static let categoryCollectionViewCell = _R.nib._CategoryCollectionViewCell()
    /// Nib `DetailGiftSupplementaryTableViewCell`.
    static let detailGiftSupplementaryTableViewCell = _R.nib._DetailGiftSupplementaryTableViewCell()
    /// Nib `DetailGiftViewFooterView`.
    static let detailGiftViewFooterView = _R.nib._DetailGiftViewFooterView()
    /// Nib `DetailGiftViewHeaderView`.
    static let detailGiftViewHeaderView = _R.nib._DetailGiftViewHeaderView()
    /// Nib `GiftTableViewHeaderView`.
    static let giftTableViewHeaderView = _R.nib._GiftTableViewHeaderView()
    /// Nib `HomeGiftTableViewCell`.
    static let homeGiftTableViewCell = _R.nib._HomeGiftTableViewCell()
    /// Nib `HomeMagazineTableViewCell`.
    static let homeMagazineTableViewCell = _R.nib._HomeMagazineTableViewCell()
    /// Nib `HomeNotificationTableViewCell`.
    static let homeNotificationTableViewCell = _R.nib._HomeNotificationTableViewCell()
    /// Nib `HomeTableViewHeaderView`.
    static let homeTableViewHeaderView = _R.nib._HomeTableViewHeaderView()
    /// Nib `MagazineTabCollectionViewCell`.
    static let magazineTabCollectionViewCell = _R.nib._MagazineTabCollectionViewCell()
    /// Nib `MyMenu2TableViewCell`.
    static let myMenu2TableViewCell = _R.nib._MyMenu2TableViewCell()
    /// Nib `NotificationTableViewCell`.
    static let notificationTableViewCell = _R.nib._NotificationTableViewCell()
    /// Nib `PointBalanceTableViewCell`.
    static let pointBalanceTableViewCell = _R.nib._PointBalanceTableViewCell()
    /// Nib `PointHistoryTableViewCell`.
    static let pointHistoryTableViewCell = _R.nib._PointHistoryTableViewCell()
    /// Nib `UserInfoOptionTableViewCell`.
    static let userInfoOptionTableViewCell = _R.nib._UserInfoOptionTableViewCell()
    /// Nib `VideoCategoryView`.
    static let videoCategoryView = _R.nib._VideoCategoryView()
    /// Nib `VideoChannelCollectionViewCell`.
    static let videoChannelCollectionViewCell = _R.nib._VideoChannelCollectionViewCell()
    /// Nib `VideoHeaderView`.
    static let videoHeaderView = _R.nib._VideoHeaderView()
    /// Nib `VideoTableViewCell`.
    static let videoTableViewCell = _R.nib._VideoTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryCollectionViewCell) instead")
    static func categoryCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailGiftSupplementaryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailGiftSupplementaryTableViewCell) instead")
    static func detailGiftSupplementaryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailGiftSupplementaryTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailGiftViewFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailGiftViewFooterView) instead")
    static func detailGiftViewFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailGiftViewFooterView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailGiftViewHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailGiftViewHeaderView) instead")
    static func detailGiftViewHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailGiftViewHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GiftTableViewHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.giftTableViewHeaderView) instead")
    static func giftTableViewHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.giftTableViewHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeGiftTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeGiftTableViewCell) instead")
    static func homeGiftTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeGiftTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeMagazineTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeMagazineTableViewCell) instead")
    static func homeMagazineTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeMagazineTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeNotificationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeNotificationTableViewCell) instead")
    static func homeNotificationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeNotificationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeTableViewHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeTableViewHeaderView) instead")
    static func homeTableViewHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeTableViewHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MagazineTabCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.magazineTabCollectionViewCell) instead")
    static func magazineTabCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.magazineTabCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyMenu2TableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myMenu2TableViewCell) instead")
    static func myMenu2TableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myMenu2TableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationTableViewCell) instead")
    static func notificationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PointBalanceTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pointBalanceTableViewCell) instead")
    static func pointBalanceTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pointBalanceTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PointHistoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pointHistoryTableViewCell) instead")
    static func pointHistoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pointHistoryTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserInfoOptionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userInfoOptionTableViewCell) instead")
    static func userInfoOptionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userInfoOptionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoCategoryView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoCategoryView) instead")
    static func videoCategoryView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoCategoryView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoChannelCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoChannelCollectionViewCell) instead")
    static func videoChannelCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoChannelCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoHeaderView) instead")
    static func videoHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoTableViewCell) instead")
    static func videoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoTableViewCell)
    }
    #endif

    static func categoryCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCollectionViewCell? {
      return R.nib.categoryCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCollectionViewCell
    }

    static func detailGiftSupplementaryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailGiftSupplementaryTableViewCell? {
      return R.nib.detailGiftSupplementaryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailGiftSupplementaryTableViewCell
    }

    static func detailGiftViewFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailGiftViewFooterView? {
      return R.nib.detailGiftViewFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailGiftViewFooterView
    }

    static func detailGiftViewHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailGiftViewHeaderView? {
      return R.nib.detailGiftViewHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailGiftViewHeaderView
    }

    static func giftTableViewHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GiftTableViewHeaderView? {
      return R.nib.giftTableViewHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GiftTableViewHeaderView
    }

    static func homeGiftTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeGiftTableViewCell? {
      return R.nib.homeGiftTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeGiftTableViewCell
    }

    static func homeMagazineTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeMagazineTableViewCell? {
      return R.nib.homeMagazineTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeMagazineTableViewCell
    }

    static func homeNotificationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeNotificationTableViewCell? {
      return R.nib.homeNotificationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeNotificationTableViewCell
    }

    static func homeTableViewHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTableViewHeaderView? {
      return R.nib.homeTableViewHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTableViewHeaderView
    }

    static func magazineTabCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MagazineTabCollectionViewCell? {
      return R.nib.magazineTabCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MagazineTabCollectionViewCell
    }

    static func myMenu2TableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyMenu2TableViewCell? {
      return R.nib.myMenu2TableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyMenu2TableViewCell
    }

    static func notificationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
      return R.nib.notificationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
    }

    static func pointBalanceTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PointBalanceTableViewCell? {
      return R.nib.pointBalanceTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PointBalanceTableViewCell
    }

    static func pointHistoryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PointHistoryTableViewCell? {
      return R.nib.pointHistoryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PointHistoryTableViewCell
    }

    static func userInfoOptionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoOptionTableViewCell? {
      return R.nib.userInfoOptionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoOptionTableViewCell
    }

    static func videoCategoryView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCategoryView? {
      return R.nib.videoCategoryView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCategoryView
    }

    static func videoChannelCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoChannelCollectionViewCell? {
      return R.nib.videoChannelCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoChannelCollectionViewCell
    }

    static func videoHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoHeaderView? {
      return R.nib.videoHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoHeaderView
    }

    static func videoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoTableViewCell? {
      return R.nib.videoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 8 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CategoryCollectionViewCellID`.
    static let categoryCollectionViewCellID: Rswift.ReuseIdentifier<CategoryCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CategoryCollectionViewCellID")
    /// Reuse identifier `DetailGiftSupplementaryTableViewCellID`.
    static let detailGiftSupplementaryTableViewCellID: Rswift.ReuseIdentifier<DetailGiftSupplementaryTableViewCell> = Rswift.ReuseIdentifier(identifier: "DetailGiftSupplementaryTableViewCellID")
    /// Reuse identifier `HomeGiftTableViewCellID`.
    static let homeGiftTableViewCellID: Rswift.ReuseIdentifier<HomeGiftTableViewCell> = Rswift.ReuseIdentifier(identifier: "HomeGiftTableViewCellID")
    /// Reuse identifier `HomeMagazineTableViewCellID`.
    static let homeMagazineTableViewCellID: Rswift.ReuseIdentifier<HomeMagazineTableViewCell> = Rswift.ReuseIdentifier(identifier: "HomeMagazineTableViewCellID")
    /// Reuse identifier `HomeNotificationTableViewCellID`.
    static let homeNotificationTableViewCellID: Rswift.ReuseIdentifier<HomeNotificationTableViewCell> = Rswift.ReuseIdentifier(identifier: "HomeNotificationTableViewCellID")
    /// Reuse identifier `NotificationTableViewCellID`.
    static let notificationTableViewCellID: Rswift.ReuseIdentifier<NotificationTableViewCell> = Rswift.ReuseIdentifier(identifier: "NotificationTableViewCellID")
    /// Reuse identifier `VideoChannelCollectionViewCellID`.
    static let videoChannelCollectionViewCellID: Rswift.ReuseIdentifier<VideoChannelCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "VideoChannelCollectionViewCellID")
    /// Reuse identifier `VideoTableViewCellID`.
    static let videoTableViewCellID: Rswift.ReuseIdentifier<VideoTableViewCell> = Rswift.ReuseIdentifier(identifier: "VideoTableViewCellID")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localization` struct is generated, and contains static references to 193 localization keys.
    struct localization {
      /// Base translation: No
      ///
      /// Locales: Base
      static let buttonNoTitle = Rswift.StringResource(key: "Button.No.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: OK
      ///
      /// Locales: Base
      static let buttonOkTitle = Rswift.StringResource(key: "Button.Ok.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please check your internet connection and try again.
      ///
      /// Locales: Base
      static let networkErrorLostInternet = Rswift.StringResource(key: "Network.Error.Lost.Internet", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please re-sign in.
      ///
      /// Locales: Base
      static let networkErrorSessionExpired = Rswift.StringResource(key: "Network.Error.Session.Expired", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: QRコードからポイントを取得する
      ///
      /// Locales: Base
      static let getPointsFromQrCode = Rswift.StringResource(key: "Get.Points.From.Qr.Code", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: QRコード読み取り
      ///
      /// Locales: Base
      static let qrCodeReading = Rswift.StringResource(key: "QR.Code.Reading", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SMS(ショートメッセージ)で送られてきた4桁の番号を入力してください
      ///
      /// Locales: Base
      static let otpAuthenStringDesc = Rswift.StringResource(key: "OTPAuthen.String.Desc", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SMSに電話番号を送信
      ///
      /// Locales: Base
      static let smsAuthenString005 = Rswift.StringResource(key: "SMSAuthen.String.005", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SMS認証
      ///
      /// Locales: Base
      static let smsAuthenStringTitle = Rswift.StringResource(key: "SMSAuthen.String.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Server process error. Please try again.
      ///
      /// Locales: Base
      static let networkErrorServerMsg = Rswift.StringResource(key: "Network.Error.Server.Msg", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Session expired
      ///
      /// Locales: Base
      static let sessionExpiredTitle = Rswift.StringResource(key: "Session.Expired.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Unauthorized error.
      ///
      /// Locales: Base
      static let networkErrorUnauthorizedMsg = Rswift.StringResource(key: "Network.Error.Unauthorized.Msg", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Yes
      ///
      /// Locales: Base
      static let buttonYesTitle = Rswift.StringResource(key: "Button.Yes.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: あとで登録する
      ///
      /// Locales: Base
      static let registerLater = Rswift.StringResource(key: "Register.Later", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: いいえ
      ///
      /// Locales: Base
      static let logoutCancel = Rswift.StringResource(key: "Logout.Cancel", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: いいね
      ///
      /// Locales: Base
      static let buttonLikeTitle = Rswift.StringResource(key: "Button.Like.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: お帰りなさい
      ///
      /// Locales: Base
      static let welcomeHome = Rswift.StringResource(key: "Welcome.Home", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: お気に入り
      ///
      /// Locales: Base
      static let buttonFavouriteTitle = Rswift.StringResource(key: "Button.Favourite.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: お気に入り
      ///
      /// Locales: Base
      static let magazineStringTabFavourite = Rswift.StringResource(key: "Magazine.String.Tab.Favourite", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: お気に入り
      ///
      /// Locales: Base
      static let videoString005 = Rswift.StringResource(key: "Video.String.005", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: お気に入り動画
      ///
      /// Locales: Base
      static let videoString004 = Rswift.StringResource(key: "Video.String.004", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: お知らせ
      ///
      /// Locales: Base
      static let homeString002 = Rswift.StringResource(key: "Home.String.002", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: お知らせ
      ///
      /// Locales: Base
      static let notice = Rswift.StringResource(key: "Notice", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: このプレゼントはすでに適用されています
      ///
      /// Locales: Base
      static let thisGiftHasAlreadyBeenApplied = Rswift.StringResource(key: "This.Gift.Has.Already.Been.Applied", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: しました
      ///
      /// Locales: Base
      static let otpAuthenPopupMessage = Rswift.StringResource(key: "OTPAuthen.Popup.message", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: すべて
      ///
      /// Locales: Base
      static let magazineStringTabAll = Rswift.StringResource(key: "Magazine.String.Tab.All", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: すべてを見る
      ///
      /// Locales: Base
      static let homeString003 = Rswift.StringResource(key: "Home.String.003", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: すべてを見る
      ///
      /// Locales: Base
      static let viewAll = Rswift.StringResource(key: "View.All", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: せい
      ///
      /// Locales: Base
      static let because = Rswift.StringResource(key: "Because", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: で毎月届く
      ///
      /// Locales: Base
      static let arrivesMonthly = Rswift.StringResource(key: "Arrives.Monthly", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: に同意して
      ///
      /// Locales: Base
      static let agreeWith = Rswift.StringResource(key: "Agree.With", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: に同意して
      ///
      /// Locales: Base
      static let firstString004 = Rswift.StringResource(key: "First.String.004", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: はい
      ///
      /// Locales: Base
      static let logoutConfirm = Rswift.StringResource(key: "Logout.Confirm", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: はじめる
      ///
      /// Locales: Base
      static let buttonBeginTitle = Rswift.StringResource(key: "Button.Begin.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: めい
      ///
      /// Locales: Base
      static let niece = Rswift.StringResource(key: "Niece", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: よくある質問
      ///
      /// Locales: Base
      static let frequentlyAskedQuestions = Rswift.StringResource(key: "Frequently.Asked.Questions", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: をお読みください
      ///
      /// Locales: Base
      static let subscriptionTermNote2 = Rswift.StringResource(key: "Subscription.Term.Note2", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: アカウントをお持ちの方
      ///
      /// Locales: Base
      static let smsAuthenString002 = Rswift.StringResource(key: "SMSAuthen.String.002", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: アカウントをお持ちの方はこちら
      ///
      /// Locales: Base
      static let firstString006 = Rswift.StringResource(key: "First.String.006", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: アカウントを復旧する
      ///
      /// Locales: Base
      static let recoverAccountString003 = Rswift.StringResource(key: "RecoverAccount.String.003", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: アカウント復旧
      ///
      /// Locales: Base
      static let recoverAccountString001 = Rswift.StringResource(key: "RecoverAccount.String.001", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: アカウント復旧完了
      ///
      /// Locales: Base
      static let accountRecoveryCompleted = Rswift.StringResource(key: "Account.Recovery.Completed", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: アカウント復旧完了
      ///
      /// Locales: Base
      static let recoverAccountPopupCompleted001 = Rswift.StringResource(key: "RecoverAccount.Popup.Completed.001", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: アプリ会員プレゼント
      ///
      /// Locales: Base
      static let giftLabelMember = Rswift.StringResource(key: "Gift.Label.Member", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: アンケート
      ///
      /// Locales: Base
      static let questionnaire = Rswift.StringResource(key: "Questionnaire", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: アンケートにお答えください。
      ///
      /// Locales: Base
      static let pleaseAnswerTheQuestionnaire = Rswift.StringResource(key: "Please.Answer.The.Questionnaire", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: インターネット接続を確認してください。
      ///
      /// Locales: Base
      static let networkErrorOfflineMsg = Rswift.StringResource(key: "Network.Error.Offline.Msg", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ウェルネス
      ///
      /// Locales: Base
      static let tabBarString003 = Rswift.StringResource(key: "TabBar.String.003", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ウェルネス
      ///
      /// Locales: Base
      static let wellness = Rswift.StringResource(key: "Wellness", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: エラー：入力してください。
      ///
      /// Locales: Base
      static let otpAuthenNotEmpty = Rswift.StringResource(key: "OTPAuthen.NotEmpty", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: エラー：入力してください。
      ///
      /// Locales: Base
      static let smsAuthenNotEmpty = Rswift.StringResource(key: "SMSAuthen.NotEmpty", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: カタカナで入力してください。
      ///
      /// Locales: Base
      static let pleaseInputInKatakana = Rswift.StringResource(key: "Please.Input.In.Katakana", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: カテゴリー
      ///
      /// Locales: Base
      static let categoryTags = Rswift.StringResource(key: "Category.Tags", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: カテゴリーを選択してください。
      ///
      /// Locales: Base
      static let pleaseSelectACategory = Rswift.StringResource(key: "Please.Select.A.Category", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: カテゴリー設定
      ///
      /// Locales: Base
      static let categoryTagSetting = Rswift.StringResource(key: "Category.Tag.Setting", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: キャンセル
      ///
      /// Locales: Base
      static let buttonCancelTitle = Rswift.StringResource(key: "Button.Cancel.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: キャンセル
      ///
      /// Locales: Base
      static let unregisterPopupCancel = Rswift.StringResource(key: "Unregister.Popup.Cancel", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: コピーする
      ///
      /// Locales: Base
      static let makeACopy = Rswift.StringResource(key: "Make.A.Copy", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: サーバ内部で障害が発生しました。ご担当者にお問合せください。
      ///
      /// Locales: Base
      static let timedoutMsg = Rswift.StringResource(key: "Timedout.Msg", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: チャンネル
      ///
      /// Locales: Base
      static let videoChannelListTitle = Rswift.StringResource(key: "Video.ChannelList.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: チャンネル一覧
      ///
      /// Locales: Base
      static let videoString002 = Rswift.StringResource(key: "Video.String.002", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: データ引継ぎ
      ///
      /// Locales: Base
      static let dataTransfer = Rswift.StringResource(key: "Data.Transfer", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: トップページへ
      ///
      /// Locales: Base
      static let topPage = Rswift.StringResource(key: "Top.Page", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: バージョン情報
      ///
      /// Locales: Base
      static let versionInformation = Rswift.StringResource(key: "Version.Information", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: パスワードが異なります
      ///
      /// Locales: Base
      static let recoverAccountString004 = Rswift.StringResource(key: "RecoverAccount.String.004", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: パスワードをコピーするかメモをお願いします
      ///
      /// Locales: Base
      static let pleaseCopyOrWriteDownYourPassword = Rswift.StringResource(key: "Please.Copy.Or.Write.Down.Your.Password", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: パスワードを入力してください
      ///
      /// Locales: Base
      static let recoverAccountString002 = Rswift.StringResource(key: "RecoverAccount.String.002", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: パスワードを発行する
      ///
      /// Locales: Base
      static let issuePassword = Rswift.StringResource(key: "Issue.Password", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: パスワード発行
      ///
      /// Locales: Base
      static let passwordGeneration = Rswift.StringResource(key: "Password.Generation", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ビル名を入力してください。
      ///
      /// Locales: Base
      static let pleaseEnterTheBuildingName = Rswift.StringResource(key: "Please.Enter.The.Building.Name", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: フリーマガジン
      ///
      /// Locales: Base
      static let homeString004 = Rswift.StringResource(key: "Home.String.004", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: フリーマガジン
      ///
      /// Locales: Base
      static let magazineStringTitle = Rswift.StringResource(key: "Magazine.String.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: プッシュ通知
      ///
      /// Locales: Base
      static let notifiSettingString002 = Rswift.StringResource(key: "NotifiSetting.String.002", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: プライバシーポリシー
      ///
      /// Locales: Base
      static let firstString003 = Rswift.StringResource(key: "First.String.003", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: プライバシーポリシー
      ///
      /// Locales: Base
      static let privacyPolicy = Rswift.StringResource(key: "Privacy.Policy", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: プレゼント
      ///
      /// Locales: Base
      static let homeString006 = Rswift.StringResource(key: "Home.String.006", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: プレゼント
      ///
      /// Locales: Base
      static let tabBarString002 = Rswift.StringResource(key: "TabBar.String.002", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: プレゼントに応募する
      ///
      /// Locales: Base
      static let applyForAPresent = Rswift.StringResource(key: "Apply.For.A.Present", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: プレゼント一覧
      ///
      /// Locales: Base
      static let giftString001 = Rswift.StringResource(key: "Gift.String.001", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: プレゼント一覧に戻る
      ///
      /// Locales: Base
      static let returnToTheGiftList = Rswift.StringResource(key: "Return.To.The.Gift.List", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: プレゼント応募
      ///
      /// Locales: Base
      static let presentApplication = Rswift.StringResource(key: "Present.Application", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ホーム
      ///
      /// Locales: Base
      static let buttonHomePageTitle = Rswift.StringResource(key: "Button.HomePage.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ホームに戻る
      ///
      /// Locales: Base
      static let backToHome = Rswift.StringResource(key: "Back.To.Home", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ホームへ
      ///
      /// Locales: Base
      static let buttonGoHomeTitle = Rswift.StringResource(key: "Button.GoHome.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ポイント
      ///
      /// Locales: Base
      static let giftStringPoint = Rswift.StringResource(key: "Gift.String.Point", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ポイント
      ///
      /// Locales: Base
      static let magazineStringPoint = Rswift.StringResource(key: "Magazine.String.Point", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ポイント
      ///
      /// Locales: Base
      static let point = Rswift.StringResource(key: "Point", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ポイントが 不足しています
      ///
      /// Locales: Base
      static let notEnoughPoints = Rswift.StringResource(key: "Not.Enough.Points", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ポイント別
      ///
      /// Locales: Base
      static let giftStringPointHeader = Rswift.StringResource(key: "Gift.String.Point.Header", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ポイント取得・利用履歴
      ///
      /// Locales: Base
      static let pointAcquisitionUseHistory = Rswift.StringResource(key: "Point.Acquisition.Use.History", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ポイント残高
      ///
      /// Locales: Base
      static let pointBalance = Rswift.StringResource(key: "Point.Balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: マイページ
      ///
      /// Locales: Base
      static let buttonMyPageTitle = Rswift.StringResource(key: "Button.MyPage.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: マイページ
      ///
      /// Locales: Base
      static let myPage = Rswift.StringResource(key: "My.Page", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: マイページに戻る
      ///
      /// Locales: Base
      static let backToMyPage = Rswift.StringResource(key: "Back.To.My.Page", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: マイメニュー
      ///
      /// Locales: Base
      static let myMenu = Rswift.StringResource(key: "My.Menu", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: マガジン
      ///
      /// Locales: Base
      static let tabBarString001 = Rswift.StringResource(key: "TabBar.String.001", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: マガジン定期購読のご紹介
      ///
      /// Locales: Base
      static let introductionToMagazineSubscription = Rswift.StringResource(key: "Introduction.To.Magazine.Subscription", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ユーザー情報変更
      ///
      /// Locales: Base
      static let changeUserInformation = Rswift.StringResource(key: "Change.User.Information", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ランキング
      ///
      /// Locales: Base
      static let magazineStringTabRanking = Rswift.StringResource(key: "Magazine.String.Tab.Ranking", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ランキング
      ///
      /// Locales: Base
      static let videoString003 = Rswift.StringResource(key: "Video.String.003", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ログアウト
      ///
      /// Locales: Base
      static let logoutTitle = Rswift.StringResource(key: "Logout.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ログアウトしますか？
      ///
      /// Locales: Base
      static let logoutMessage = Rswift.StringResource(key: "Logout.Message", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ログイン
      ///
      /// Locales: Base
      static let firstButtonLogin = Rswift.StringResource(key: "First.Button.Login", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ロゴ
      ///
      /// Locales: Base
      static let homeString001 = Rswift.StringResource(key: "Home.String.001", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 上記に同意して定期購読を申込む
      ///
      /// Locales: Base
      static let subscriptionNoteForNotsigned = Rswift.StringResource(key: "Subscription.Note.For.Notsigned", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 上記内容に同意して登録する
      ///
      /// Locales: Base
      static let agreeToTheAboveAndRegister = Rswift.StringResource(key: "Agree.To.The.Above.And.Register", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 下記フォームからいますぐ登録
      ///
      /// Locales: Base
      static let registerNowUsingTheFormBelow = Rswift.StringResource(key: "Register.Now.Using.The.Form.Below", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 会員を退会された場合には、現在保存されている購入履歴やお届け先等の情報はすべて削除されます。また、貯まっているポイントは全て失効しますが、再入会いただいた場合、退会時のポイントは復活します。
      ///
      /// Locales: Base
      static let unregisterStringMessage = Rswift.StringResource(key: "Unregister.String.Message", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 住所
      ///
      /// Locales: Base
      static let streetAddress = Rswift.StringResource(key: "Street.Address", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 例
      ///
      /// Locales: Base
      static let example = Rswift.StringResource(key: "Example", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 再入会される方は、新規登録ボタンで復旧できます
      ///
      /// Locales: Base
      static let firstString007 = Rswift.StringResource(key: "First.String.007", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 初めての方はこちら
      ///
      /// Locales: Base
      static let firstStringRegisterNew = Rswift.StringResource(key: "First.String.RegisterNew", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 利用規約
      ///
      /// Locales: Base
      static let firstString002 = Rswift.StringResource(key: "First.String.002", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 利用規約
      ///
      /// Locales: Base
      static let termsOfService = Rswift.StringResource(key: "Terms.Of.Service", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 動画
      ///
      /// Locales: Base
      static let homeString005 = Rswift.StringResource(key: "Home.String.005", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 動画
      ///
      /// Locales: Base
      static let tabBarString004 = Rswift.StringResource(key: "TabBar.String.004", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 動画一覧
      ///
      /// Locales: Base
      static let videoString001 = Rswift.StringResource(key: "Video.String.001", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 動画一覧
      ///
      /// Locales: Base
      static let videoTabVideoList = Rswift.StringResource(key: "Video.Tab.VideoList", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 取得しました
      ///
      /// Locales: Base
      static let magazineGrantPointMessage = Rswift.StringResource(key: "Magazine.GrantPoint.Message", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 名
      ///
      /// Locales: Base
      static let name = Rswift.StringResource(key: "Name", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 変更する
      ///
      /// Locales: Base
      static let change = Rswift.StringResource(key: "Change", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 契約中
      ///
      /// Locales: Base
      static let subscriptionInfoSigned = Rswift.StringResource(key: "Subscription.Info.Signed", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 女
      ///
      /// Locales: Base
      static let female = Rswift.StringResource(key: "Female", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 姓
      ///
      /// Locales: Base
      static let surname = Rswift.StringResource(key: "Surname", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 安全なご利用のため、携帯電話のSMS(ショートメッセージ)を利用して認証を行います
      ///
      /// Locales: Base
      static let smsAuthenString003 = Rswift.StringResource(key: "SMSAuthen.String.003", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 完了
      ///
      /// Locales: Base
      static let buttonDoneTitle = Rswift.StringResource(key: "Button.Done.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 定期購読
      ///
      /// Locales: Base
      static let subscriptionInfoTitle = Rswift.StringResource(key: "Subscription.Info.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 定期購読のご紹介
      ///
      /// Locales: Base
      static let introductionOfSubscription = Rswift.StringResource(key: "Introduction.Of.Subscription", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 定期購読の注意事項
      ///
      /// Locales: Base
      static let notesOnSubscription2 = Rswift.StringResource(key: "Notes.On.subscription.2", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 定期購読の注意事項
      ///
      /// Locales: Base
      static let subscriptionTermNote1 = Rswift.StringResource(key: "Subscription.Term.Note1", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 定期購読の注意事項について
      ///
      /// Locales: Base
      static let notesOnSubscription = Rswift.StringResource(key: "Notes.On.Subscription", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 定期購読を解約する
      ///
      /// Locales: Base
      static let subscriptionNoteForSigned = Rswift.StringResource(key: "Subscription.Note.For.Signed", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 市区町村名を入力してください。
      ///
      /// Locales: Base
      static let pleaseEnterACityName = Rswift.StringResource(key: "Please.Enter.A.City.Name", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 必須
      ///
      /// Locales: Base
      static let required = Rswift.StringResource(key: "Required", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 必須フィールドに入力してください
      ///
      /// Locales: Base
      static let requiredField = Rswift.StringResource(key: "Required.Field", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 応募内容のご確認
      ///
      /// Locales: Base
      static let confirmationOfApplicationContents = Rswift.StringResource(key: "Confirmation.Of.Application.Contents", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 応募完了
      ///
      /// Locales: Base
      static let applicationCompleted = Rswift.StringResource(key: "Application.Completed", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 応募規約
      ///
      /// Locales: Base
      static let applicationTerms = Rswift.StringResource(key: "Application.Terms", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 性別
      ///
      /// Locales: Base
      static let gender = Rswift.StringResource(key: "Gender", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 性別を選択してください。
      ///
      /// Locales: Base
      static let pleaseSelectAGender = Rswift.StringResource(key: "Please.Select.A.Gender", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 戻る
      ///
      /// Locales: Base
      static let `return` = Rswift.StringResource(key: "Return", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 戻る
      ///
      /// Locales: Base
      static let buttonBackTitle = Rswift.StringResource(key: "Button.Back.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 携帯電話番号(ハイフンなし)
      ///
      /// Locales: Base
      static let smsAuthenString004 = Rswift.StringResource(key: "SMSAuthen.String.004", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 数字4桁を入力
      ///
      /// Locales: Base
      static let otpAuthenFieldPlaceHolder = Rswift.StringResource(key: "OTPAuthen.Field.PlaceHolder", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 新規登録
      ///
      /// Locales: Base
      static let firstString005 = Rswift.StringResource(key: "First.String.005", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 新規登録
      ///
      /// Locales: Base
      static let smsAuthenString001 = Rswift.StringResource(key: "SMSAuthen.String.001", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 最短1分で始められます！
      ///
      /// Locales: Base
      static let getStartedInAsLittleAsOneMinute = Rswift.StringResource(key: "Get.Started.In.As.Little.As.One.Minute", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 未契約
      ///
      /// Locales: Base
      static let subscriptionInfoNotsigned = Rswift.StringResource(key: "Subscription.Info.Notsigned", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 未定
      ///
      /// Locales: Base
      static let undecided = Rswift.StringResource(key: "Undecided", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 本人情報変更
      ///
      /// Locales: Base
      static let changePersonalInformation = Rswift.StringResource(key: "Change.Personal.Information", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 本当に退会しますか？
      ///
      /// Locales: Base
      static let unregisterPopupTitle = Rswift.StringResource(key: "Unregister.Popup.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 氏名
      ///
      /// Locales: Base
      static let fullname = Rswift.StringResource(key: "Fullname", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 氏名(かな)
      ///
      /// Locales: Base
      static let nameKana = Rswift.StringResource(key: "Name.Kana", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 氏名(かな)を入力してください。
      ///
      /// Locales: Base
      static let pleaseEnterYourKanaName = Rswift.StringResource(key: "Please.Enter.Your.Kana.Name", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 氏名を入力してください。
      ///
      /// Locales: Base
      static let pleaseEnterYourName = Rswift.StringResource(key: "Please.Enter.Your.Name", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 決定
      ///
      /// Locales: Base
      static let decide = Rswift.StringResource(key: "Decide", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 無料
      ///
      /// Locales: Base
      static let free = Rswift.StringResource(key: "Free", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 特定商取引法に基づく表記
      ///
      /// Locales: Base
      static let specifiedCommercialTransactionLaw = Rswift.StringResource(key: "Specified.Commercial.Transaction.Law", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 現在のポイント残高
      ///
      /// Locales: Base
      static let currentPointBalance = Rswift.StringResource(key: "Current.Point.Balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 生年月日
      ///
      /// Locales: Base
      static let birthday = Rswift.StringResource(key: "Birthday", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 生年月日を入力してください。
      ///
      /// Locales: Base
      static let pleaseEnterYourDateOfBirth = Rswift.StringResource(key: "Please.Enter.Your.Date.Of.Birth", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 申請者は不合格
      ///
      /// Locales: Base
      static let applicantFailed = Rswift.StringResource(key: "Applicant.Failed", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 申込む
      ///
      /// Locales: Base
      static let subscriptionApplyTitle = Rswift.StringResource(key: "Subscription.Apply.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 男
      ///
      /// Locales: Base
      static let male = Rswift.StringResource(key: "Male", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 番地を入力してください。
      ///
      /// Locales: Base
      static let pleaseEnterTheAddressName = Rswift.StringResource(key: "Please.Enter.The.Address.Name", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 登録する
      ///
      /// Locales: Base
      static let register = Rswift.StringResource(key: "Register", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 登録完了
      ///
      /// Locales: Base
      static let completionOfRegistration = Rswift.StringResource(key: "Completion.Of.Registration", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 確認画面へ進む
      ///
      /// Locales: Base
      static let proceedToConfirmationScreen = Rswift.StringResource(key: "Proceed.To.Confirmation.Screen", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 答えを選択してください
      ///
      /// Locales: Base
      static let requiredAnswer = Rswift.StringResource(key: "Required.Answer", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 興味のあるカテゴリーを選択してください
      ///
      /// Locales: Base
      static let pleaseSelectTheCategoryYouAreInterestedIn = Rswift.StringResource(key: "Please.Select.The.Category.You.Are.Interested.In", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 興味のあるタグを選択してください
      ///
      /// Locales: Base
      static let selectTagsOfInterest = Rswift.StringResource(key: "Select.Tags.Of.Interest", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 解約する
      ///
      /// Locales: Base
      static let subscriptionCancelTitle = Rswift.StringResource(key: "Subscription.Cancel.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 認証番号
      ///
      /// Locales: Base
      static let otpAuthenStringTitle = Rswift.StringResource(key: "OTPAuthen.String.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 認証番号(4桁)
      ///
      /// Locales: Base
      static let otpAuthenFieldContent = Rswift.StringResource(key: "OTPAuthen.Field.Content", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 認証番号を送信
      ///
      /// Locales: Base
      static let otpAuthenButtonVerify = Rswift.StringResource(key: "OTPAuthen.Button.Verify", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 説明テキストが入ります説明テキストが入ります説明テキストが入ります
      ///
      /// Locales: Base
      static let recoverAccountPopupCompleted002 = Rswift.StringResource(key: "RecoverAccount.Popup.Completed.002", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 退会
      ///
      /// Locales: Base
      static let unregisterStringTitle = Rswift.StringResource(key: "Unregister.String.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 退会する
      ///
      /// Locales: Base
      static let unregisterButtonString = Rswift.StringResource(key: "Unregister.Button.String", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 退会する場合はOKボタンを押してください
      ///
      /// Locales: Base
      static let unregisterPopupMessage = Rswift.StringResource(key: "Unregister.Popup.Message", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 退会手続きの前にご確認ください
      ///
      /// Locales: Base
      static let unregisterStringVerify = Rswift.StringResource(key: "Unregister.String.Verify", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 通知設定
      ///
      /// Locales: Base
      static let notifiSettingString001 = Rswift.StringResource(key: "NotifiSetting.String.001", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 通知設定
      ///
      /// Locales: Base
      static let notificationSettings = Rswift.StringResource(key: "Notification.Settings", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 郵便番号は%@文字でなければなりません
      ///
      /// Locales: Base
      static let zipcodeRequiredCharacters = Rswift.StringResource(key: "Zipcode.Required.Characters", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 郵便番号は%@文字でなければなりません。
      ///
      /// Locales: Base
      static let thePostalCodeMustBeXCharacters = Rswift.StringResource(key: "The.Postal.Code.Must.Be.X.Characters", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 郵便番号を入力してください。
      ///
      /// Locales: Base
      static let pleaseEnterYourZipcode = Rswift.StringResource(key: "Please.Enter.Your.Zipcode", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 郵便番号検索
      ///
      /// Locales: Base
      static let postCodeSearchEngine = Rswift.StringResource(key: "Post.Code.Search.Engine", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 都道府県
      ///
      /// Locales: Base
      static let prefectures = Rswift.StringResource(key: "Prefectures", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 都道府県を選択してください。
      ///
      /// Locales: Base
      static let selectThePrefecture = Rswift.StringResource(key: "Select.The.Prefecture", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 閉じる
      ///
      /// Locales: Base
      static let close = Rswift.StringResource(key: "Close", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 閉じる
      ///
      /// Locales: Base
      static let magazineStringClose = Rswift.StringResource(key: "Magazine.String.Close", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 雑誌購読者プレゼント
      ///
      /// Locales: Base
      static let giftLabelSubscriber = Rswift.StringResource(key: "Gift.Label.Subscriber", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 電話番号
      ///
      /// Locales: Base
      static let phoneNumber = Rswift.StringResource(key: "Phone.Number", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 電話番号を入力してください。
      ///
      /// Locales: Base
      static let pleaseEnterAPhoneNumber = Rswift.StringResource(key: "Please.Enter.A.Phone.Number", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)

      /// Base translation: No
      ///
      /// Locales: Base
      static func buttonNoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.No.Title", tableName: "Localization", bundle: hostingBundle, value: "No", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.No.Title"
        }

        return NSLocalizedString("Button.No.Title", tableName: "Localization", bundle: bundle, value: "No", comment: "")
      }

      /// Base translation: OK
      ///
      /// Locales: Base
      static func buttonOkTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.Ok.Title", tableName: "Localization", bundle: hostingBundle, value: "OK", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.Ok.Title"
        }

        return NSLocalizedString("Button.Ok.Title", tableName: "Localization", bundle: bundle, value: "OK", comment: "")
      }

      /// Base translation: Please check your internet connection and try again.
      ///
      /// Locales: Base
      static func networkErrorLostInternet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Network.Error.Lost.Internet", tableName: "Localization", bundle: hostingBundle, value: "Please check your internet connection and try again.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Network.Error.Lost.Internet"
        }

        return NSLocalizedString("Network.Error.Lost.Internet", tableName: "Localization", bundle: bundle, value: "Please check your internet connection and try again.", comment: "")
      }

      /// Base translation: Please re-sign in.
      ///
      /// Locales: Base
      static func networkErrorSessionExpired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Network.Error.Session.Expired", tableName: "Localization", bundle: hostingBundle, value: "Please re-sign in.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Network.Error.Session.Expired"
        }

        return NSLocalizedString("Network.Error.Session.Expired", tableName: "Localization", bundle: bundle, value: "Please re-sign in.", comment: "")
      }

      /// Base translation: QRコードからポイントを取得する
      ///
      /// Locales: Base
      static func getPointsFromQrCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Get.Points.From.Qr.Code", tableName: "Localization", bundle: hostingBundle, value: "QRコードからポイントを取得する", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Get.Points.From.Qr.Code"
        }

        return NSLocalizedString("Get.Points.From.Qr.Code", tableName: "Localization", bundle: bundle, value: "QRコードからポイントを取得する", comment: "")
      }

      /// Base translation: QRコード読み取り
      ///
      /// Locales: Base
      static func qrCodeReading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QR.Code.Reading", tableName: "Localization", bundle: hostingBundle, value: "QRコード読み取り", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "QR.Code.Reading"
        }

        return NSLocalizedString("QR.Code.Reading", tableName: "Localization", bundle: bundle, value: "QRコード読み取り", comment: "")
      }

      /// Base translation: SMS(ショートメッセージ)で送られてきた4桁の番号を入力してください
      ///
      /// Locales: Base
      static func otpAuthenStringDesc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPAuthen.String.Desc", tableName: "Localization", bundle: hostingBundle, value: "SMS(ショートメッセージ)で送られてきた4桁の番号を入力してください", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "OTPAuthen.String.Desc"
        }

        return NSLocalizedString("OTPAuthen.String.Desc", tableName: "Localization", bundle: bundle, value: "SMS(ショートメッセージ)で送られてきた4桁の番号を入力してください", comment: "")
      }

      /// Base translation: SMSに電話番号を送信
      ///
      /// Locales: Base
      static func smsAuthenString005(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SMSAuthen.String.005", tableName: "Localization", bundle: hostingBundle, value: "SMSに電話番号を送信", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "SMSAuthen.String.005"
        }

        return NSLocalizedString("SMSAuthen.String.005", tableName: "Localization", bundle: bundle, value: "SMSに電話番号を送信", comment: "")
      }

      /// Base translation: SMS認証
      ///
      /// Locales: Base
      static func smsAuthenStringTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SMSAuthen.String.Title", tableName: "Localization", bundle: hostingBundle, value: "SMS認証", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "SMSAuthen.String.Title"
        }

        return NSLocalizedString("SMSAuthen.String.Title", tableName: "Localization", bundle: bundle, value: "SMS認証", comment: "")
      }

      /// Base translation: Server process error. Please try again.
      ///
      /// Locales: Base
      static func networkErrorServerMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Network.Error.Server.Msg", tableName: "Localization", bundle: hostingBundle, value: "Server process error. Please try again.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Network.Error.Server.Msg"
        }

        return NSLocalizedString("Network.Error.Server.Msg", tableName: "Localization", bundle: bundle, value: "Server process error. Please try again.", comment: "")
      }

      /// Base translation: Session expired
      ///
      /// Locales: Base
      static func sessionExpiredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Session.Expired.Title", tableName: "Localization", bundle: hostingBundle, value: "Session expired", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Session.Expired.Title"
        }

        return NSLocalizedString("Session.Expired.Title", tableName: "Localization", bundle: bundle, value: "Session expired", comment: "")
      }

      /// Base translation: Unauthorized error.
      ///
      /// Locales: Base
      static func networkErrorUnauthorizedMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Network.Error.Unauthorized.Msg", tableName: "Localization", bundle: hostingBundle, value: "Unauthorized error.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Network.Error.Unauthorized.Msg"
        }

        return NSLocalizedString("Network.Error.Unauthorized.Msg", tableName: "Localization", bundle: bundle, value: "Unauthorized error.", comment: "")
      }

      /// Base translation: Yes
      ///
      /// Locales: Base
      static func buttonYesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.Yes.Title", tableName: "Localization", bundle: hostingBundle, value: "Yes", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.Yes.Title"
        }

        return NSLocalizedString("Button.Yes.Title", tableName: "Localization", bundle: bundle, value: "Yes", comment: "")
      }

      /// Base translation: あとで登録する
      ///
      /// Locales: Base
      static func registerLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Register.Later", tableName: "Localization", bundle: hostingBundle, value: "あとで登録する", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Register.Later"
        }

        return NSLocalizedString("Register.Later", tableName: "Localization", bundle: bundle, value: "あとで登録する", comment: "")
      }

      /// Base translation: いいえ
      ///
      /// Locales: Base
      static func logoutCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout.Cancel", tableName: "Localization", bundle: hostingBundle, value: "いいえ", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Logout.Cancel"
        }

        return NSLocalizedString("Logout.Cancel", tableName: "Localization", bundle: bundle, value: "いいえ", comment: "")
      }

      /// Base translation: いいね
      ///
      /// Locales: Base
      static func buttonLikeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.Like.Title", tableName: "Localization", bundle: hostingBundle, value: "いいね", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.Like.Title"
        }

        return NSLocalizedString("Button.Like.Title", tableName: "Localization", bundle: bundle, value: "いいね", comment: "")
      }

      /// Base translation: お帰りなさい
      ///
      /// Locales: Base
      static func welcomeHome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Welcome.Home", tableName: "Localization", bundle: hostingBundle, value: "お帰りなさい", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Welcome.Home"
        }

        return NSLocalizedString("Welcome.Home", tableName: "Localization", bundle: bundle, value: "お帰りなさい", comment: "")
      }

      /// Base translation: お気に入り
      ///
      /// Locales: Base
      static func buttonFavouriteTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.Favourite.Title", tableName: "Localization", bundle: hostingBundle, value: "お気に入り", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.Favourite.Title"
        }

        return NSLocalizedString("Button.Favourite.Title", tableName: "Localization", bundle: bundle, value: "お気に入り", comment: "")
      }

      /// Base translation: お気に入り
      ///
      /// Locales: Base
      static func magazineStringTabFavourite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Magazine.String.Tab.Favourite", tableName: "Localization", bundle: hostingBundle, value: "お気に入り", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Magazine.String.Tab.Favourite"
        }

        return NSLocalizedString("Magazine.String.Tab.Favourite", tableName: "Localization", bundle: bundle, value: "お気に入り", comment: "")
      }

      /// Base translation: お気に入り
      ///
      /// Locales: Base
      static func videoString005(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video.String.005", tableName: "Localization", bundle: hostingBundle, value: "お気に入り", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Video.String.005"
        }

        return NSLocalizedString("Video.String.005", tableName: "Localization", bundle: bundle, value: "お気に入り", comment: "")
      }

      /// Base translation: お気に入り動画
      ///
      /// Locales: Base
      static func videoString004(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video.String.004", tableName: "Localization", bundle: hostingBundle, value: "お気に入り動画", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Video.String.004"
        }

        return NSLocalizedString("Video.String.004", tableName: "Localization", bundle: bundle, value: "お気に入り動画", comment: "")
      }

      /// Base translation: お知らせ
      ///
      /// Locales: Base
      static func homeString002(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.String.002", tableName: "Localization", bundle: hostingBundle, value: "お知らせ", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Home.String.002"
        }

        return NSLocalizedString("Home.String.002", tableName: "Localization", bundle: bundle, value: "お知らせ", comment: "")
      }

      /// Base translation: お知らせ
      ///
      /// Locales: Base
      static func notice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notice", tableName: "Localization", bundle: hostingBundle, value: "お知らせ", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Notice"
        }

        return NSLocalizedString("Notice", tableName: "Localization", bundle: bundle, value: "お知らせ", comment: "")
      }

      /// Base translation: このプレゼントはすでに適用されています
      ///
      /// Locales: Base
      static func thisGiftHasAlreadyBeenApplied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This.Gift.Has.Already.Been.Applied", tableName: "Localization", bundle: hostingBundle, value: "このプレゼントはすでに適用されています", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "This.Gift.Has.Already.Been.Applied"
        }

        return NSLocalizedString("This.Gift.Has.Already.Been.Applied", tableName: "Localization", bundle: bundle, value: "このプレゼントはすでに適用されています", comment: "")
      }

      /// Base translation: しました
      ///
      /// Locales: Base
      static func otpAuthenPopupMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPAuthen.Popup.message", tableName: "Localization", bundle: hostingBundle, value: "しました", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "OTPAuthen.Popup.message"
        }

        return NSLocalizedString("OTPAuthen.Popup.message", tableName: "Localization", bundle: bundle, value: "しました", comment: "")
      }

      /// Base translation: すべて
      ///
      /// Locales: Base
      static func magazineStringTabAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Magazine.String.Tab.All", tableName: "Localization", bundle: hostingBundle, value: "すべて", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Magazine.String.Tab.All"
        }

        return NSLocalizedString("Magazine.String.Tab.All", tableName: "Localization", bundle: bundle, value: "すべて", comment: "")
      }

      /// Base translation: すべてを見る
      ///
      /// Locales: Base
      static func homeString003(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.String.003", tableName: "Localization", bundle: hostingBundle, value: "すべてを見る", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Home.String.003"
        }

        return NSLocalizedString("Home.String.003", tableName: "Localization", bundle: bundle, value: "すべてを見る", comment: "")
      }

      /// Base translation: すべてを見る
      ///
      /// Locales: Base
      static func viewAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View.All", tableName: "Localization", bundle: hostingBundle, value: "すべてを見る", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "View.All"
        }

        return NSLocalizedString("View.All", tableName: "Localization", bundle: bundle, value: "すべてを見る", comment: "")
      }

      /// Base translation: せい
      ///
      /// Locales: Base
      static func because(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Because", tableName: "Localization", bundle: hostingBundle, value: "せい", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Because"
        }

        return NSLocalizedString("Because", tableName: "Localization", bundle: bundle, value: "せい", comment: "")
      }

      /// Base translation: で毎月届く
      ///
      /// Locales: Base
      static func arrivesMonthly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Arrives.Monthly", tableName: "Localization", bundle: hostingBundle, value: "で毎月届く", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Arrives.Monthly"
        }

        return NSLocalizedString("Arrives.Monthly", tableName: "Localization", bundle: bundle, value: "で毎月届く", comment: "")
      }

      /// Base translation: に同意して
      ///
      /// Locales: Base
      static func agreeWith(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Agree.With", tableName: "Localization", bundle: hostingBundle, value: "に同意して", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Agree.With"
        }

        return NSLocalizedString("Agree.With", tableName: "Localization", bundle: bundle, value: "に同意して", comment: "")
      }

      /// Base translation: に同意して
      ///
      /// Locales: Base
      static func firstString004(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First.String.004", tableName: "Localization", bundle: hostingBundle, value: "に同意して", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "First.String.004"
        }

        return NSLocalizedString("First.String.004", tableName: "Localization", bundle: bundle, value: "に同意して", comment: "")
      }

      /// Base translation: はい
      ///
      /// Locales: Base
      static func logoutConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout.Confirm", tableName: "Localization", bundle: hostingBundle, value: "はい", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Logout.Confirm"
        }

        return NSLocalizedString("Logout.Confirm", tableName: "Localization", bundle: bundle, value: "はい", comment: "")
      }

      /// Base translation: はじめる
      ///
      /// Locales: Base
      static func buttonBeginTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.Begin.Title", tableName: "Localization", bundle: hostingBundle, value: "はじめる", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.Begin.Title"
        }

        return NSLocalizedString("Button.Begin.Title", tableName: "Localization", bundle: bundle, value: "はじめる", comment: "")
      }

      /// Base translation: めい
      ///
      /// Locales: Base
      static func niece(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Niece", tableName: "Localization", bundle: hostingBundle, value: "めい", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Niece"
        }

        return NSLocalizedString("Niece", tableName: "Localization", bundle: bundle, value: "めい", comment: "")
      }

      /// Base translation: よくある質問
      ///
      /// Locales: Base
      static func frequentlyAskedQuestions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Frequently.Asked.Questions", tableName: "Localization", bundle: hostingBundle, value: "よくある質問", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Frequently.Asked.Questions"
        }

        return NSLocalizedString("Frequently.Asked.Questions", tableName: "Localization", bundle: bundle, value: "よくある質問", comment: "")
      }

      /// Base translation: をお読みください
      ///
      /// Locales: Base
      static func subscriptionTermNote2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscription.Term.Note2", tableName: "Localization", bundle: hostingBundle, value: "をお読みください", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Subscription.Term.Note2"
        }

        return NSLocalizedString("Subscription.Term.Note2", tableName: "Localization", bundle: bundle, value: "をお読みください", comment: "")
      }

      /// Base translation: アカウントをお持ちの方
      ///
      /// Locales: Base
      static func smsAuthenString002(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SMSAuthen.String.002", tableName: "Localization", bundle: hostingBundle, value: "アカウントをお持ちの方", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "SMSAuthen.String.002"
        }

        return NSLocalizedString("SMSAuthen.String.002", tableName: "Localization", bundle: bundle, value: "アカウントをお持ちの方", comment: "")
      }

      /// Base translation: アカウントをお持ちの方はこちら
      ///
      /// Locales: Base
      static func firstString006(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First.String.006", tableName: "Localization", bundle: hostingBundle, value: "アカウントをお持ちの方はこちら", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "First.String.006"
        }

        return NSLocalizedString("First.String.006", tableName: "Localization", bundle: bundle, value: "アカウントをお持ちの方はこちら", comment: "")
      }

      /// Base translation: アカウントを復旧する
      ///
      /// Locales: Base
      static func recoverAccountString003(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RecoverAccount.String.003", tableName: "Localization", bundle: hostingBundle, value: "アカウントを復旧する", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "RecoverAccount.String.003"
        }

        return NSLocalizedString("RecoverAccount.String.003", tableName: "Localization", bundle: bundle, value: "アカウントを復旧する", comment: "")
      }

      /// Base translation: アカウント復旧
      ///
      /// Locales: Base
      static func recoverAccountString001(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RecoverAccount.String.001", tableName: "Localization", bundle: hostingBundle, value: "アカウント復旧", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "RecoverAccount.String.001"
        }

        return NSLocalizedString("RecoverAccount.String.001", tableName: "Localization", bundle: bundle, value: "アカウント復旧", comment: "")
      }

      /// Base translation: アカウント復旧完了
      ///
      /// Locales: Base
      static func accountRecoveryCompleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Account.Recovery.Completed", tableName: "Localization", bundle: hostingBundle, value: "アカウント復旧完了", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Account.Recovery.Completed"
        }

        return NSLocalizedString("Account.Recovery.Completed", tableName: "Localization", bundle: bundle, value: "アカウント復旧完了", comment: "")
      }

      /// Base translation: アカウント復旧完了
      ///
      /// Locales: Base
      static func recoverAccountPopupCompleted001(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RecoverAccount.Popup.Completed.001", tableName: "Localization", bundle: hostingBundle, value: "アカウント復旧完了", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "RecoverAccount.Popup.Completed.001"
        }

        return NSLocalizedString("RecoverAccount.Popup.Completed.001", tableName: "Localization", bundle: bundle, value: "アカウント復旧完了", comment: "")
      }

      /// Base translation: アプリ会員プレゼント
      ///
      /// Locales: Base
      static func giftLabelMember(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gift.Label.Member", tableName: "Localization", bundle: hostingBundle, value: "アプリ会員プレゼント", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Gift.Label.Member"
        }

        return NSLocalizedString("Gift.Label.Member", tableName: "Localization", bundle: bundle, value: "アプリ会員プレゼント", comment: "")
      }

      /// Base translation: アンケート
      ///
      /// Locales: Base
      static func questionnaire(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Questionnaire", tableName: "Localization", bundle: hostingBundle, value: "アンケート", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Questionnaire"
        }

        return NSLocalizedString("Questionnaire", tableName: "Localization", bundle: bundle, value: "アンケート", comment: "")
      }

      /// Base translation: アンケートにお答えください。
      ///
      /// Locales: Base
      static func pleaseAnswerTheQuestionnaire(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Answer.The.Questionnaire", tableName: "Localization", bundle: hostingBundle, value: "アンケートにお答えください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Answer.The.Questionnaire"
        }

        return NSLocalizedString("Please.Answer.The.Questionnaire", tableName: "Localization", bundle: bundle, value: "アンケートにお答えください。", comment: "")
      }

      /// Base translation: インターネット接続を確認してください。
      ///
      /// Locales: Base
      static func networkErrorOfflineMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Network.Error.Offline.Msg", tableName: "Localization", bundle: hostingBundle, value: "インターネット接続を確認してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Network.Error.Offline.Msg"
        }

        return NSLocalizedString("Network.Error.Offline.Msg", tableName: "Localization", bundle: bundle, value: "インターネット接続を確認してください。", comment: "")
      }

      /// Base translation: ウェルネス
      ///
      /// Locales: Base
      static func tabBarString003(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TabBar.String.003", tableName: "Localization", bundle: hostingBundle, value: "ウェルネス", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "TabBar.String.003"
        }

        return NSLocalizedString("TabBar.String.003", tableName: "Localization", bundle: bundle, value: "ウェルネス", comment: "")
      }

      /// Base translation: ウェルネス
      ///
      /// Locales: Base
      static func wellness(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wellness", tableName: "Localization", bundle: hostingBundle, value: "ウェルネス", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Wellness"
        }

        return NSLocalizedString("Wellness", tableName: "Localization", bundle: bundle, value: "ウェルネス", comment: "")
      }

      /// Base translation: エラー：入力してください。
      ///
      /// Locales: Base
      static func otpAuthenNotEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPAuthen.NotEmpty", tableName: "Localization", bundle: hostingBundle, value: "エラー：入力してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "OTPAuthen.NotEmpty"
        }

        return NSLocalizedString("OTPAuthen.NotEmpty", tableName: "Localization", bundle: bundle, value: "エラー：入力してください。", comment: "")
      }

      /// Base translation: エラー：入力してください。
      ///
      /// Locales: Base
      static func smsAuthenNotEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SMSAuthen.NotEmpty", tableName: "Localization", bundle: hostingBundle, value: "エラー：入力してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "SMSAuthen.NotEmpty"
        }

        return NSLocalizedString("SMSAuthen.NotEmpty", tableName: "Localization", bundle: bundle, value: "エラー：入力してください。", comment: "")
      }

      /// Base translation: カタカナで入力してください。
      ///
      /// Locales: Base
      static func pleaseInputInKatakana(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Input.In.Katakana", tableName: "Localization", bundle: hostingBundle, value: "カタカナで入力してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Input.In.Katakana"
        }

        return NSLocalizedString("Please.Input.In.Katakana", tableName: "Localization", bundle: bundle, value: "カタカナで入力してください。", comment: "")
      }

      /// Base translation: カテゴリー
      ///
      /// Locales: Base
      static func categoryTags(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Category.Tags", tableName: "Localization", bundle: hostingBundle, value: "カテゴリー", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Category.Tags"
        }

        return NSLocalizedString("Category.Tags", tableName: "Localization", bundle: bundle, value: "カテゴリー", comment: "")
      }

      /// Base translation: カテゴリーを選択してください。
      ///
      /// Locales: Base
      static func pleaseSelectACategory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Select.A.Category", tableName: "Localization", bundle: hostingBundle, value: "カテゴリーを選択してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Select.A.Category"
        }

        return NSLocalizedString("Please.Select.A.Category", tableName: "Localization", bundle: bundle, value: "カテゴリーを選択してください。", comment: "")
      }

      /// Base translation: カテゴリー設定
      ///
      /// Locales: Base
      static func categoryTagSetting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Category.Tag.Setting", tableName: "Localization", bundle: hostingBundle, value: "カテゴリー設定", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Category.Tag.Setting"
        }

        return NSLocalizedString("Category.Tag.Setting", tableName: "Localization", bundle: bundle, value: "カテゴリー設定", comment: "")
      }

      /// Base translation: キャンセル
      ///
      /// Locales: Base
      static func buttonCancelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.Cancel.Title", tableName: "Localization", bundle: hostingBundle, value: "キャンセル", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.Cancel.Title"
        }

        return NSLocalizedString("Button.Cancel.Title", tableName: "Localization", bundle: bundle, value: "キャンセル", comment: "")
      }

      /// Base translation: キャンセル
      ///
      /// Locales: Base
      static func unregisterPopupCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unregister.Popup.Cancel", tableName: "Localization", bundle: hostingBundle, value: "キャンセル", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Unregister.Popup.Cancel"
        }

        return NSLocalizedString("Unregister.Popup.Cancel", tableName: "Localization", bundle: bundle, value: "キャンセル", comment: "")
      }

      /// Base translation: コピーする
      ///
      /// Locales: Base
      static func makeACopy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Make.A.Copy", tableName: "Localization", bundle: hostingBundle, value: "コピーする", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Make.A.Copy"
        }

        return NSLocalizedString("Make.A.Copy", tableName: "Localization", bundle: bundle, value: "コピーする", comment: "")
      }

      /// Base translation: サーバ内部で障害が発生しました。ご担当者にお問合せください。
      ///
      /// Locales: Base
      static func timedoutMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Timedout.Msg", tableName: "Localization", bundle: hostingBundle, value: "サーバ内部で障害が発生しました。ご担当者にお問合せください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Timedout.Msg"
        }

        return NSLocalizedString("Timedout.Msg", tableName: "Localization", bundle: bundle, value: "サーバ内部で障害が発生しました。ご担当者にお問合せください。", comment: "")
      }

      /// Base translation: チャンネル
      ///
      /// Locales: Base
      static func videoChannelListTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video.ChannelList.Title", tableName: "Localization", bundle: hostingBundle, value: "チャンネル", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Video.ChannelList.Title"
        }

        return NSLocalizedString("Video.ChannelList.Title", tableName: "Localization", bundle: bundle, value: "チャンネル", comment: "")
      }

      /// Base translation: チャンネル一覧
      ///
      /// Locales: Base
      static func videoString002(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video.String.002", tableName: "Localization", bundle: hostingBundle, value: "チャンネル一覧", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Video.String.002"
        }

        return NSLocalizedString("Video.String.002", tableName: "Localization", bundle: bundle, value: "チャンネル一覧", comment: "")
      }

      /// Base translation: データ引継ぎ
      ///
      /// Locales: Base
      static func dataTransfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Data.Transfer", tableName: "Localization", bundle: hostingBundle, value: "データ引継ぎ", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Data.Transfer"
        }

        return NSLocalizedString("Data.Transfer", tableName: "Localization", bundle: bundle, value: "データ引継ぎ", comment: "")
      }

      /// Base translation: トップページへ
      ///
      /// Locales: Base
      static func topPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Top.Page", tableName: "Localization", bundle: hostingBundle, value: "トップページへ", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Top.Page"
        }

        return NSLocalizedString("Top.Page", tableName: "Localization", bundle: bundle, value: "トップページへ", comment: "")
      }

      /// Base translation: バージョン情報
      ///
      /// Locales: Base
      static func versionInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Version.Information", tableName: "Localization", bundle: hostingBundle, value: "バージョン情報", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Version.Information"
        }

        return NSLocalizedString("Version.Information", tableName: "Localization", bundle: bundle, value: "バージョン情報", comment: "")
      }

      /// Base translation: パスワードが異なります
      ///
      /// Locales: Base
      static func recoverAccountString004(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RecoverAccount.String.004", tableName: "Localization", bundle: hostingBundle, value: "パスワードが異なります", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "RecoverAccount.String.004"
        }

        return NSLocalizedString("RecoverAccount.String.004", tableName: "Localization", bundle: bundle, value: "パスワードが異なります", comment: "")
      }

      /// Base translation: パスワードをコピーするかメモをお願いします
      ///
      /// Locales: Base
      static func pleaseCopyOrWriteDownYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Copy.Or.Write.Down.Your.Password", tableName: "Localization", bundle: hostingBundle, value: "パスワードをコピーするかメモをお願いします", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Copy.Or.Write.Down.Your.Password"
        }

        return NSLocalizedString("Please.Copy.Or.Write.Down.Your.Password", tableName: "Localization", bundle: bundle, value: "パスワードをコピーするかメモをお願いします", comment: "")
      }

      /// Base translation: パスワードを入力してください
      ///
      /// Locales: Base
      static func recoverAccountString002(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RecoverAccount.String.002", tableName: "Localization", bundle: hostingBundle, value: "パスワードを入力してください", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "RecoverAccount.String.002"
        }

        return NSLocalizedString("RecoverAccount.String.002", tableName: "Localization", bundle: bundle, value: "パスワードを入力してください", comment: "")
      }

      /// Base translation: パスワードを発行する
      ///
      /// Locales: Base
      static func issuePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Issue.Password", tableName: "Localization", bundle: hostingBundle, value: "パスワードを発行する", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Issue.Password"
        }

        return NSLocalizedString("Issue.Password", tableName: "Localization", bundle: bundle, value: "パスワードを発行する", comment: "")
      }

      /// Base translation: パスワード発行
      ///
      /// Locales: Base
      static func passwordGeneration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password.Generation", tableName: "Localization", bundle: hostingBundle, value: "パスワード発行", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Password.Generation"
        }

        return NSLocalizedString("Password.Generation", tableName: "Localization", bundle: bundle, value: "パスワード発行", comment: "")
      }

      /// Base translation: ビル名を入力してください。
      ///
      /// Locales: Base
      static func pleaseEnterTheBuildingName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Enter.The.Building.Name", tableName: "Localization", bundle: hostingBundle, value: "ビル名を入力してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Enter.The.Building.Name"
        }

        return NSLocalizedString("Please.Enter.The.Building.Name", tableName: "Localization", bundle: bundle, value: "ビル名を入力してください。", comment: "")
      }

      /// Base translation: フリーマガジン
      ///
      /// Locales: Base
      static func homeString004(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.String.004", tableName: "Localization", bundle: hostingBundle, value: "フリーマガジン", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Home.String.004"
        }

        return NSLocalizedString("Home.String.004", tableName: "Localization", bundle: bundle, value: "フリーマガジン", comment: "")
      }

      /// Base translation: フリーマガジン
      ///
      /// Locales: Base
      static func magazineStringTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Magazine.String.Title", tableName: "Localization", bundle: hostingBundle, value: "フリーマガジン", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Magazine.String.Title"
        }

        return NSLocalizedString("Magazine.String.Title", tableName: "Localization", bundle: bundle, value: "フリーマガジン", comment: "")
      }

      /// Base translation: プッシュ通知
      ///
      /// Locales: Base
      static func notifiSettingString002(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NotifiSetting.String.002", tableName: "Localization", bundle: hostingBundle, value: "プッシュ通知", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "NotifiSetting.String.002"
        }

        return NSLocalizedString("NotifiSetting.String.002", tableName: "Localization", bundle: bundle, value: "プッシュ通知", comment: "")
      }

      /// Base translation: プライバシーポリシー
      ///
      /// Locales: Base
      static func firstString003(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First.String.003", tableName: "Localization", bundle: hostingBundle, value: "プライバシーポリシー", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "First.String.003"
        }

        return NSLocalizedString("First.String.003", tableName: "Localization", bundle: bundle, value: "プライバシーポリシー", comment: "")
      }

      /// Base translation: プライバシーポリシー
      ///
      /// Locales: Base
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy.Policy", tableName: "Localization", bundle: hostingBundle, value: "プライバシーポリシー", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Privacy.Policy"
        }

        return NSLocalizedString("Privacy.Policy", tableName: "Localization", bundle: bundle, value: "プライバシーポリシー", comment: "")
      }

      /// Base translation: プレゼント
      ///
      /// Locales: Base
      static func homeString006(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.String.006", tableName: "Localization", bundle: hostingBundle, value: "プレゼント", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Home.String.006"
        }

        return NSLocalizedString("Home.String.006", tableName: "Localization", bundle: bundle, value: "プレゼント", comment: "")
      }

      /// Base translation: プレゼント
      ///
      /// Locales: Base
      static func tabBarString002(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TabBar.String.002", tableName: "Localization", bundle: hostingBundle, value: "プレゼント", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "TabBar.String.002"
        }

        return NSLocalizedString("TabBar.String.002", tableName: "Localization", bundle: bundle, value: "プレゼント", comment: "")
      }

      /// Base translation: プレゼントに応募する
      ///
      /// Locales: Base
      static func applyForAPresent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Apply.For.A.Present", tableName: "Localization", bundle: hostingBundle, value: "プレゼントに応募する", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Apply.For.A.Present"
        }

        return NSLocalizedString("Apply.For.A.Present", tableName: "Localization", bundle: bundle, value: "プレゼントに応募する", comment: "")
      }

      /// Base translation: プレゼント一覧
      ///
      /// Locales: Base
      static func giftString001(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gift.String.001", tableName: "Localization", bundle: hostingBundle, value: "プレゼント一覧", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Gift.String.001"
        }

        return NSLocalizedString("Gift.String.001", tableName: "Localization", bundle: bundle, value: "プレゼント一覧", comment: "")
      }

      /// Base translation: プレゼント一覧に戻る
      ///
      /// Locales: Base
      static func returnToTheGiftList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Return.To.The.Gift.List", tableName: "Localization", bundle: hostingBundle, value: "プレゼント一覧に戻る", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Return.To.The.Gift.List"
        }

        return NSLocalizedString("Return.To.The.Gift.List", tableName: "Localization", bundle: bundle, value: "プレゼント一覧に戻る", comment: "")
      }

      /// Base translation: プレゼント応募
      ///
      /// Locales: Base
      static func presentApplication(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Present.Application", tableName: "Localization", bundle: hostingBundle, value: "プレゼント応募", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Present.Application"
        }

        return NSLocalizedString("Present.Application", tableName: "Localization", bundle: bundle, value: "プレゼント応募", comment: "")
      }

      /// Base translation: ホーム
      ///
      /// Locales: Base
      static func buttonHomePageTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.HomePage.Title", tableName: "Localization", bundle: hostingBundle, value: "ホーム", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.HomePage.Title"
        }

        return NSLocalizedString("Button.HomePage.Title", tableName: "Localization", bundle: bundle, value: "ホーム", comment: "")
      }

      /// Base translation: ホームに戻る
      ///
      /// Locales: Base
      static func backToHome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Back.To.Home", tableName: "Localization", bundle: hostingBundle, value: "ホームに戻る", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Back.To.Home"
        }

        return NSLocalizedString("Back.To.Home", tableName: "Localization", bundle: bundle, value: "ホームに戻る", comment: "")
      }

      /// Base translation: ホームへ
      ///
      /// Locales: Base
      static func buttonGoHomeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.GoHome.Title", tableName: "Localization", bundle: hostingBundle, value: "ホームへ", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.GoHome.Title"
        }

        return NSLocalizedString("Button.GoHome.Title", tableName: "Localization", bundle: bundle, value: "ホームへ", comment: "")
      }

      /// Base translation: ポイント
      ///
      /// Locales: Base
      static func giftStringPoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gift.String.Point", tableName: "Localization", bundle: hostingBundle, value: "ポイント", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Gift.String.Point"
        }

        return NSLocalizedString("Gift.String.Point", tableName: "Localization", bundle: bundle, value: "ポイント", comment: "")
      }

      /// Base translation: ポイント
      ///
      /// Locales: Base
      static func magazineStringPoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Magazine.String.Point", tableName: "Localization", bundle: hostingBundle, value: "ポイント", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Magazine.String.Point"
        }

        return NSLocalizedString("Magazine.String.Point", tableName: "Localization", bundle: bundle, value: "ポイント", comment: "")
      }

      /// Base translation: ポイント
      ///
      /// Locales: Base
      static func point(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Point", tableName: "Localization", bundle: hostingBundle, value: "ポイント", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Point"
        }

        return NSLocalizedString("Point", tableName: "Localization", bundle: bundle, value: "ポイント", comment: "")
      }

      /// Base translation: ポイントが 不足しています
      ///
      /// Locales: Base
      static func notEnoughPoints(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not.Enough.Points", tableName: "Localization", bundle: hostingBundle, value: "ポイントが\n不足しています", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Not.Enough.Points"
        }

        return NSLocalizedString("Not.Enough.Points", tableName: "Localization", bundle: bundle, value: "ポイントが\n不足しています", comment: "")
      }

      /// Base translation: ポイント別
      ///
      /// Locales: Base
      static func giftStringPointHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gift.String.Point.Header", tableName: "Localization", bundle: hostingBundle, value: "ポイント別", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Gift.String.Point.Header"
        }

        return NSLocalizedString("Gift.String.Point.Header", tableName: "Localization", bundle: bundle, value: "ポイント別", comment: "")
      }

      /// Base translation: ポイント取得・利用履歴
      ///
      /// Locales: Base
      static func pointAcquisitionUseHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Point.Acquisition.Use.History", tableName: "Localization", bundle: hostingBundle, value: "ポイント取得・利用履歴", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Point.Acquisition.Use.History"
        }

        return NSLocalizedString("Point.Acquisition.Use.History", tableName: "Localization", bundle: bundle, value: "ポイント取得・利用履歴", comment: "")
      }

      /// Base translation: ポイント残高
      ///
      /// Locales: Base
      static func pointBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Point.Balance", tableName: "Localization", bundle: hostingBundle, value: "ポイント残高", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Point.Balance"
        }

        return NSLocalizedString("Point.Balance", tableName: "Localization", bundle: bundle, value: "ポイント残高", comment: "")
      }

      /// Base translation: マイページ
      ///
      /// Locales: Base
      static func buttonMyPageTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.MyPage.Title", tableName: "Localization", bundle: hostingBundle, value: "マイページ", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.MyPage.Title"
        }

        return NSLocalizedString("Button.MyPage.Title", tableName: "Localization", bundle: bundle, value: "マイページ", comment: "")
      }

      /// Base translation: マイページ
      ///
      /// Locales: Base
      static func myPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My.Page", tableName: "Localization", bundle: hostingBundle, value: "マイページ", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "My.Page"
        }

        return NSLocalizedString("My.Page", tableName: "Localization", bundle: bundle, value: "マイページ", comment: "")
      }

      /// Base translation: マイページに戻る
      ///
      /// Locales: Base
      static func backToMyPage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Back.To.My.Page", tableName: "Localization", bundle: hostingBundle, value: "マイページに戻る", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Back.To.My.Page"
        }

        return NSLocalizedString("Back.To.My.Page", tableName: "Localization", bundle: bundle, value: "マイページに戻る", comment: "")
      }

      /// Base translation: マイメニュー
      ///
      /// Locales: Base
      static func myMenu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My.Menu", tableName: "Localization", bundle: hostingBundle, value: "マイメニュー", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "My.Menu"
        }

        return NSLocalizedString("My.Menu", tableName: "Localization", bundle: bundle, value: "マイメニュー", comment: "")
      }

      /// Base translation: マガジン
      ///
      /// Locales: Base
      static func tabBarString001(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TabBar.String.001", tableName: "Localization", bundle: hostingBundle, value: "マガジン", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "TabBar.String.001"
        }

        return NSLocalizedString("TabBar.String.001", tableName: "Localization", bundle: bundle, value: "マガジン", comment: "")
      }

      /// Base translation: マガジン定期購読のご紹介
      ///
      /// Locales: Base
      static func introductionToMagazineSubscription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Introduction.To.Magazine.Subscription", tableName: "Localization", bundle: hostingBundle, value: "マガジン定期購読のご紹介", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Introduction.To.Magazine.Subscription"
        }

        return NSLocalizedString("Introduction.To.Magazine.Subscription", tableName: "Localization", bundle: bundle, value: "マガジン定期購読のご紹介", comment: "")
      }

      /// Base translation: ユーザー情報変更
      ///
      /// Locales: Base
      static func changeUserInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change.User.Information", tableName: "Localization", bundle: hostingBundle, value: "ユーザー情報変更", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Change.User.Information"
        }

        return NSLocalizedString("Change.User.Information", tableName: "Localization", bundle: bundle, value: "ユーザー情報変更", comment: "")
      }

      /// Base translation: ランキング
      ///
      /// Locales: Base
      static func magazineStringTabRanking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Magazine.String.Tab.Ranking", tableName: "Localization", bundle: hostingBundle, value: "ランキング", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Magazine.String.Tab.Ranking"
        }

        return NSLocalizedString("Magazine.String.Tab.Ranking", tableName: "Localization", bundle: bundle, value: "ランキング", comment: "")
      }

      /// Base translation: ランキング
      ///
      /// Locales: Base
      static func videoString003(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video.String.003", tableName: "Localization", bundle: hostingBundle, value: "ランキング", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Video.String.003"
        }

        return NSLocalizedString("Video.String.003", tableName: "Localization", bundle: bundle, value: "ランキング", comment: "")
      }

      /// Base translation: ログアウト
      ///
      /// Locales: Base
      static func logoutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout.Title", tableName: "Localization", bundle: hostingBundle, value: "ログアウト", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Logout.Title"
        }

        return NSLocalizedString("Logout.Title", tableName: "Localization", bundle: bundle, value: "ログアウト", comment: "")
      }

      /// Base translation: ログアウトしますか？
      ///
      /// Locales: Base
      static func logoutMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout.Message", tableName: "Localization", bundle: hostingBundle, value: "ログアウトしますか？", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Logout.Message"
        }

        return NSLocalizedString("Logout.Message", tableName: "Localization", bundle: bundle, value: "ログアウトしますか？", comment: "")
      }

      /// Base translation: ログイン
      ///
      /// Locales: Base
      static func firstButtonLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First.Button.Login", tableName: "Localization", bundle: hostingBundle, value: "ログイン", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "First.Button.Login"
        }

        return NSLocalizedString("First.Button.Login", tableName: "Localization", bundle: bundle, value: "ログイン", comment: "")
      }

      /// Base translation: ロゴ
      ///
      /// Locales: Base
      static func homeString001(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.String.001", tableName: "Localization", bundle: hostingBundle, value: "ロゴ", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Home.String.001"
        }

        return NSLocalizedString("Home.String.001", tableName: "Localization", bundle: bundle, value: "ロゴ", comment: "")
      }

      /// Base translation: 上記に同意して定期購読を申込む
      ///
      /// Locales: Base
      static func subscriptionNoteForNotsigned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscription.Note.For.Notsigned", tableName: "Localization", bundle: hostingBundle, value: "上記に同意して定期購読を申込む", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Subscription.Note.For.Notsigned"
        }

        return NSLocalizedString("Subscription.Note.For.Notsigned", tableName: "Localization", bundle: bundle, value: "上記に同意して定期購読を申込む", comment: "")
      }

      /// Base translation: 上記内容に同意して登録する
      ///
      /// Locales: Base
      static func agreeToTheAboveAndRegister(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Agree.To.The.Above.And.Register", tableName: "Localization", bundle: hostingBundle, value: "上記内容に同意して登録する", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Agree.To.The.Above.And.Register"
        }

        return NSLocalizedString("Agree.To.The.Above.And.Register", tableName: "Localization", bundle: bundle, value: "上記内容に同意して登録する", comment: "")
      }

      /// Base translation: 下記フォームからいますぐ登録
      ///
      /// Locales: Base
      static func registerNowUsingTheFormBelow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Register.Now.Using.The.Form.Below", tableName: "Localization", bundle: hostingBundle, value: "下記フォームからいますぐ登録", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Register.Now.Using.The.Form.Below"
        }

        return NSLocalizedString("Register.Now.Using.The.Form.Below", tableName: "Localization", bundle: bundle, value: "下記フォームからいますぐ登録", comment: "")
      }

      /// Base translation: 会員を退会された場合には、現在保存されている購入履歴やお届け先等の情報はすべて削除されます。また、貯まっているポイントは全て失効しますが、再入会いただいた場合、退会時のポイントは復活します。
      ///
      /// Locales: Base
      static func unregisterStringMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unregister.String.Message", tableName: "Localization", bundle: hostingBundle, value: "会員を退会された場合には、現在保存されている購入履歴やお届け先等の情報はすべて削除されます。また、貯まっているポイントは全て失効しますが、再入会いただいた場合、退会時のポイントは復活します。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Unregister.String.Message"
        }

        return NSLocalizedString("Unregister.String.Message", tableName: "Localization", bundle: bundle, value: "会員を退会された場合には、現在保存されている購入履歴やお届け先等の情報はすべて削除されます。また、貯まっているポイントは全て失効しますが、再入会いただいた場合、退会時のポイントは復活します。", comment: "")
      }

      /// Base translation: 住所
      ///
      /// Locales: Base
      static func streetAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Street.Address", tableName: "Localization", bundle: hostingBundle, value: "住所", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Street.Address"
        }

        return NSLocalizedString("Street.Address", tableName: "Localization", bundle: bundle, value: "住所", comment: "")
      }

      /// Base translation: 例
      ///
      /// Locales: Base
      static func example(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Example", tableName: "Localization", bundle: hostingBundle, value: "例", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Example"
        }

        return NSLocalizedString("Example", tableName: "Localization", bundle: bundle, value: "例", comment: "")
      }

      /// Base translation: 再入会される方は、新規登録ボタンで復旧できます
      ///
      /// Locales: Base
      static func firstString007(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First.String.007", tableName: "Localization", bundle: hostingBundle, value: "再入会される方は、新規登録ボタンで復旧できます", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "First.String.007"
        }

        return NSLocalizedString("First.String.007", tableName: "Localization", bundle: bundle, value: "再入会される方は、新規登録ボタンで復旧できます", comment: "")
      }

      /// Base translation: 初めての方はこちら
      ///
      /// Locales: Base
      static func firstStringRegisterNew(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First.String.RegisterNew", tableName: "Localization", bundle: hostingBundle, value: "初めての方はこちら", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "First.String.RegisterNew"
        }

        return NSLocalizedString("First.String.RegisterNew", tableName: "Localization", bundle: bundle, value: "初めての方はこちら", comment: "")
      }

      /// Base translation: 利用規約
      ///
      /// Locales: Base
      static func firstString002(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First.String.002", tableName: "Localization", bundle: hostingBundle, value: "利用規約", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "First.String.002"
        }

        return NSLocalizedString("First.String.002", tableName: "Localization", bundle: bundle, value: "利用規約", comment: "")
      }

      /// Base translation: 利用規約
      ///
      /// Locales: Base
      static func termsOfService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Terms.Of.Service", tableName: "Localization", bundle: hostingBundle, value: "利用規約", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Terms.Of.Service"
        }

        return NSLocalizedString("Terms.Of.Service", tableName: "Localization", bundle: bundle, value: "利用規約", comment: "")
      }

      /// Base translation: 動画
      ///
      /// Locales: Base
      static func homeString005(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.String.005", tableName: "Localization", bundle: hostingBundle, value: "動画", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Home.String.005"
        }

        return NSLocalizedString("Home.String.005", tableName: "Localization", bundle: bundle, value: "動画", comment: "")
      }

      /// Base translation: 動画
      ///
      /// Locales: Base
      static func tabBarString004(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TabBar.String.004", tableName: "Localization", bundle: hostingBundle, value: "動画", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "TabBar.String.004"
        }

        return NSLocalizedString("TabBar.String.004", tableName: "Localization", bundle: bundle, value: "動画", comment: "")
      }

      /// Base translation: 動画一覧
      ///
      /// Locales: Base
      static func videoString001(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video.String.001", tableName: "Localization", bundle: hostingBundle, value: "動画一覧", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Video.String.001"
        }

        return NSLocalizedString("Video.String.001", tableName: "Localization", bundle: bundle, value: "動画一覧", comment: "")
      }

      /// Base translation: 動画一覧
      ///
      /// Locales: Base
      static func videoTabVideoList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video.Tab.VideoList", tableName: "Localization", bundle: hostingBundle, value: "動画一覧", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Video.Tab.VideoList"
        }

        return NSLocalizedString("Video.Tab.VideoList", tableName: "Localization", bundle: bundle, value: "動画一覧", comment: "")
      }

      /// Base translation: 取得しました
      ///
      /// Locales: Base
      static func magazineGrantPointMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Magazine.GrantPoint.Message", tableName: "Localization", bundle: hostingBundle, value: "取得しました", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Magazine.GrantPoint.Message"
        }

        return NSLocalizedString("Magazine.GrantPoint.Message", tableName: "Localization", bundle: bundle, value: "取得しました", comment: "")
      }

      /// Base translation: 名
      ///
      /// Locales: Base
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name", tableName: "Localization", bundle: hostingBundle, value: "名", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Name"
        }

        return NSLocalizedString("Name", tableName: "Localization", bundle: bundle, value: "名", comment: "")
      }

      /// Base translation: 変更する
      ///
      /// Locales: Base
      static func change(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change", tableName: "Localization", bundle: hostingBundle, value: "変更する", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Change"
        }

        return NSLocalizedString("Change", tableName: "Localization", bundle: bundle, value: "変更する", comment: "")
      }

      /// Base translation: 契約中
      ///
      /// Locales: Base
      static func subscriptionInfoSigned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscription.Info.Signed", tableName: "Localization", bundle: hostingBundle, value: "契約中", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Subscription.Info.Signed"
        }

        return NSLocalizedString("Subscription.Info.Signed", tableName: "Localization", bundle: bundle, value: "契約中", comment: "")
      }

      /// Base translation: 女
      ///
      /// Locales: Base
      static func female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Female", tableName: "Localization", bundle: hostingBundle, value: "女", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Female"
        }

        return NSLocalizedString("Female", tableName: "Localization", bundle: bundle, value: "女", comment: "")
      }

      /// Base translation: 姓
      ///
      /// Locales: Base
      static func surname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Surname", tableName: "Localization", bundle: hostingBundle, value: "姓", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Surname"
        }

        return NSLocalizedString("Surname", tableName: "Localization", bundle: bundle, value: "姓", comment: "")
      }

      /// Base translation: 安全なご利用のため、携帯電話のSMS(ショートメッセージ)を利用して認証を行います
      ///
      /// Locales: Base
      static func smsAuthenString003(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SMSAuthen.String.003", tableName: "Localization", bundle: hostingBundle, value: "安全なご利用のため、携帯電話のSMS(ショートメッセージ)を利用して認証を行います", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "SMSAuthen.String.003"
        }

        return NSLocalizedString("SMSAuthen.String.003", tableName: "Localization", bundle: bundle, value: "安全なご利用のため、携帯電話のSMS(ショートメッセージ)を利用して認証を行います", comment: "")
      }

      /// Base translation: 完了
      ///
      /// Locales: Base
      static func buttonDoneTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.Done.Title", tableName: "Localization", bundle: hostingBundle, value: "完了", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.Done.Title"
        }

        return NSLocalizedString("Button.Done.Title", tableName: "Localization", bundle: bundle, value: "完了", comment: "")
      }

      /// Base translation: 定期購読
      ///
      /// Locales: Base
      static func subscriptionInfoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscription.Info.Title", tableName: "Localization", bundle: hostingBundle, value: "定期購読", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Subscription.Info.Title"
        }

        return NSLocalizedString("Subscription.Info.Title", tableName: "Localization", bundle: bundle, value: "定期購読", comment: "")
      }

      /// Base translation: 定期購読のご紹介
      ///
      /// Locales: Base
      static func introductionOfSubscription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Introduction.Of.Subscription", tableName: "Localization", bundle: hostingBundle, value: "定期購読のご紹介", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Introduction.Of.Subscription"
        }

        return NSLocalizedString("Introduction.Of.Subscription", tableName: "Localization", bundle: bundle, value: "定期購読のご紹介", comment: "")
      }

      /// Base translation: 定期購読の注意事項
      ///
      /// Locales: Base
      static func notesOnSubscription2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notes.On.subscription.2", tableName: "Localization", bundle: hostingBundle, value: "定期購読の注意事項", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Notes.On.subscription.2"
        }

        return NSLocalizedString("Notes.On.subscription.2", tableName: "Localization", bundle: bundle, value: "定期購読の注意事項", comment: "")
      }

      /// Base translation: 定期購読の注意事項
      ///
      /// Locales: Base
      static func subscriptionTermNote1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscription.Term.Note1", tableName: "Localization", bundle: hostingBundle, value: "定期購読の注意事項", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Subscription.Term.Note1"
        }

        return NSLocalizedString("Subscription.Term.Note1", tableName: "Localization", bundle: bundle, value: "定期購読の注意事項", comment: "")
      }

      /// Base translation: 定期購読の注意事項について
      ///
      /// Locales: Base
      static func notesOnSubscription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notes.On.Subscription", tableName: "Localization", bundle: hostingBundle, value: "定期購読の注意事項について", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Notes.On.Subscription"
        }

        return NSLocalizedString("Notes.On.Subscription", tableName: "Localization", bundle: bundle, value: "定期購読の注意事項について", comment: "")
      }

      /// Base translation: 定期購読を解約する
      ///
      /// Locales: Base
      static func subscriptionNoteForSigned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscription.Note.For.Signed", tableName: "Localization", bundle: hostingBundle, value: "定期購読を解約する", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Subscription.Note.For.Signed"
        }

        return NSLocalizedString("Subscription.Note.For.Signed", tableName: "Localization", bundle: bundle, value: "定期購読を解約する", comment: "")
      }

      /// Base translation: 市区町村名を入力してください。
      ///
      /// Locales: Base
      static func pleaseEnterACityName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Enter.A.City.Name", tableName: "Localization", bundle: hostingBundle, value: "市区町村名を入力してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Enter.A.City.Name"
        }

        return NSLocalizedString("Please.Enter.A.City.Name", tableName: "Localization", bundle: bundle, value: "市区町村名を入力してください。", comment: "")
      }

      /// Base translation: 必須
      ///
      /// Locales: Base
      static func required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Required", tableName: "Localization", bundle: hostingBundle, value: "必須", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Required"
        }

        return NSLocalizedString("Required", tableName: "Localization", bundle: bundle, value: "必須", comment: "")
      }

      /// Base translation: 必須フィールドに入力してください
      ///
      /// Locales: Base
      static func requiredField(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Required.Field", tableName: "Localization", bundle: hostingBundle, value: "必須フィールドに入力してください", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Required.Field"
        }

        return NSLocalizedString("Required.Field", tableName: "Localization", bundle: bundle, value: "必須フィールドに入力してください", comment: "")
      }

      /// Base translation: 応募内容のご確認
      ///
      /// Locales: Base
      static func confirmationOfApplicationContents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirmation.Of.Application.Contents", tableName: "Localization", bundle: hostingBundle, value: "応募内容のご確認", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Confirmation.Of.Application.Contents"
        }

        return NSLocalizedString("Confirmation.Of.Application.Contents", tableName: "Localization", bundle: bundle, value: "応募内容のご確認", comment: "")
      }

      /// Base translation: 応募完了
      ///
      /// Locales: Base
      static func applicationCompleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Application.Completed", tableName: "Localization", bundle: hostingBundle, value: "応募完了", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Application.Completed"
        }

        return NSLocalizedString("Application.Completed", tableName: "Localization", bundle: bundle, value: "応募完了", comment: "")
      }

      /// Base translation: 応募規約
      ///
      /// Locales: Base
      static func applicationTerms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Application.Terms", tableName: "Localization", bundle: hostingBundle, value: "応募規約", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Application.Terms"
        }

        return NSLocalizedString("Application.Terms", tableName: "Localization", bundle: bundle, value: "応募規約", comment: "")
      }

      /// Base translation: 性別
      ///
      /// Locales: Base
      static func gender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gender", tableName: "Localization", bundle: hostingBundle, value: "性別", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Gender"
        }

        return NSLocalizedString("Gender", tableName: "Localization", bundle: bundle, value: "性別", comment: "")
      }

      /// Base translation: 性別を選択してください。
      ///
      /// Locales: Base
      static func pleaseSelectAGender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Select.A.Gender", tableName: "Localization", bundle: hostingBundle, value: "性別を選択してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Select.A.Gender"
        }

        return NSLocalizedString("Please.Select.A.Gender", tableName: "Localization", bundle: bundle, value: "性別を選択してください。", comment: "")
      }

      /// Base translation: 戻る
      ///
      /// Locales: Base
      static func `return`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Return", tableName: "Localization", bundle: hostingBundle, value: "戻る", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Return"
        }

        return NSLocalizedString("Return", tableName: "Localization", bundle: bundle, value: "戻る", comment: "")
      }

      /// Base translation: 戻る
      ///
      /// Locales: Base
      static func buttonBackTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button.Back.Title", tableName: "Localization", bundle: hostingBundle, value: "戻る", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Button.Back.Title"
        }

        return NSLocalizedString("Button.Back.Title", tableName: "Localization", bundle: bundle, value: "戻る", comment: "")
      }

      /// Base translation: 携帯電話番号(ハイフンなし)
      ///
      /// Locales: Base
      static func smsAuthenString004(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SMSAuthen.String.004", tableName: "Localization", bundle: hostingBundle, value: "携帯電話番号(ハイフンなし)", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "SMSAuthen.String.004"
        }

        return NSLocalizedString("SMSAuthen.String.004", tableName: "Localization", bundle: bundle, value: "携帯電話番号(ハイフンなし)", comment: "")
      }

      /// Base translation: 数字4桁を入力
      ///
      /// Locales: Base
      static func otpAuthenFieldPlaceHolder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPAuthen.Field.PlaceHolder", tableName: "Localization", bundle: hostingBundle, value: "数字4桁を入力", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "OTPAuthen.Field.PlaceHolder"
        }

        return NSLocalizedString("OTPAuthen.Field.PlaceHolder", tableName: "Localization", bundle: bundle, value: "数字4桁を入力", comment: "")
      }

      /// Base translation: 新規登録
      ///
      /// Locales: Base
      static func firstString005(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First.String.005", tableName: "Localization", bundle: hostingBundle, value: "新規登録", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "First.String.005"
        }

        return NSLocalizedString("First.String.005", tableName: "Localization", bundle: bundle, value: "新規登録", comment: "")
      }

      /// Base translation: 新規登録
      ///
      /// Locales: Base
      static func smsAuthenString001(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SMSAuthen.String.001", tableName: "Localization", bundle: hostingBundle, value: "新規登録", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "SMSAuthen.String.001"
        }

        return NSLocalizedString("SMSAuthen.String.001", tableName: "Localization", bundle: bundle, value: "新規登録", comment: "")
      }

      /// Base translation: 最短1分で始められます！
      ///
      /// Locales: Base
      static func getStartedInAsLittleAsOneMinute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Get.Started.In.As.Little.As.One.Minute", tableName: "Localization", bundle: hostingBundle, value: "最短1分で始められます！", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Get.Started.In.As.Little.As.One.Minute"
        }

        return NSLocalizedString("Get.Started.In.As.Little.As.One.Minute", tableName: "Localization", bundle: bundle, value: "最短1分で始められます！", comment: "")
      }

      /// Base translation: 未契約
      ///
      /// Locales: Base
      static func subscriptionInfoNotsigned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscription.Info.Notsigned", tableName: "Localization", bundle: hostingBundle, value: "未契約", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Subscription.Info.Notsigned"
        }

        return NSLocalizedString("Subscription.Info.Notsigned", tableName: "Localization", bundle: bundle, value: "未契約", comment: "")
      }

      /// Base translation: 未定
      ///
      /// Locales: Base
      static func undecided(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Undecided", tableName: "Localization", bundle: hostingBundle, value: "未定", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Undecided"
        }

        return NSLocalizedString("Undecided", tableName: "Localization", bundle: bundle, value: "未定", comment: "")
      }

      /// Base translation: 本人情報変更
      ///
      /// Locales: Base
      static func changePersonalInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change.Personal.Information", tableName: "Localization", bundle: hostingBundle, value: "本人情報変更", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Change.Personal.Information"
        }

        return NSLocalizedString("Change.Personal.Information", tableName: "Localization", bundle: bundle, value: "本人情報変更", comment: "")
      }

      /// Base translation: 本当に退会しますか？
      ///
      /// Locales: Base
      static func unregisterPopupTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unregister.Popup.Title", tableName: "Localization", bundle: hostingBundle, value: "本当に退会しますか？", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Unregister.Popup.Title"
        }

        return NSLocalizedString("Unregister.Popup.Title", tableName: "Localization", bundle: bundle, value: "本当に退会しますか？", comment: "")
      }

      /// Base translation: 氏名
      ///
      /// Locales: Base
      static func fullname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fullname", tableName: "Localization", bundle: hostingBundle, value: "氏名", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Fullname"
        }

        return NSLocalizedString("Fullname", tableName: "Localization", bundle: bundle, value: "氏名", comment: "")
      }

      /// Base translation: 氏名(かな)
      ///
      /// Locales: Base
      static func nameKana(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name.Kana", tableName: "Localization", bundle: hostingBundle, value: "氏名(かな)", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Name.Kana"
        }

        return NSLocalizedString("Name.Kana", tableName: "Localization", bundle: bundle, value: "氏名(かな)", comment: "")
      }

      /// Base translation: 氏名(かな)を入力してください。
      ///
      /// Locales: Base
      static func pleaseEnterYourKanaName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Enter.Your.Kana.Name", tableName: "Localization", bundle: hostingBundle, value: "氏名(かな)を入力してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Enter.Your.Kana.Name"
        }

        return NSLocalizedString("Please.Enter.Your.Kana.Name", tableName: "Localization", bundle: bundle, value: "氏名(かな)を入力してください。", comment: "")
      }

      /// Base translation: 氏名を入力してください。
      ///
      /// Locales: Base
      static func pleaseEnterYourName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Enter.Your.Name", tableName: "Localization", bundle: hostingBundle, value: "氏名を入力してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Enter.Your.Name"
        }

        return NSLocalizedString("Please.Enter.Your.Name", tableName: "Localization", bundle: bundle, value: "氏名を入力してください。", comment: "")
      }

      /// Base translation: 決定
      ///
      /// Locales: Base
      static func decide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Decide", tableName: "Localization", bundle: hostingBundle, value: "決定", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Decide"
        }

        return NSLocalizedString("Decide", tableName: "Localization", bundle: bundle, value: "決定", comment: "")
      }

      /// Base translation: 無料
      ///
      /// Locales: Base
      static func free(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Free", tableName: "Localization", bundle: hostingBundle, value: "無料", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Free"
        }

        return NSLocalizedString("Free", tableName: "Localization", bundle: bundle, value: "無料", comment: "")
      }

      /// Base translation: 特定商取引法に基づく表記
      ///
      /// Locales: Base
      static func specifiedCommercialTransactionLaw(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Specified.Commercial.Transaction.Law", tableName: "Localization", bundle: hostingBundle, value: "特定商取引法に基づく表記", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Specified.Commercial.Transaction.Law"
        }

        return NSLocalizedString("Specified.Commercial.Transaction.Law", tableName: "Localization", bundle: bundle, value: "特定商取引法に基づく表記", comment: "")
      }

      /// Base translation: 現在のポイント残高
      ///
      /// Locales: Base
      static func currentPointBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Current.Point.Balance", tableName: "Localization", bundle: hostingBundle, value: "現在のポイント残高", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Current.Point.Balance"
        }

        return NSLocalizedString("Current.Point.Balance", tableName: "Localization", bundle: bundle, value: "現在のポイント残高", comment: "")
      }

      /// Base translation: 生年月日
      ///
      /// Locales: Base
      static func birthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Birthday", tableName: "Localization", bundle: hostingBundle, value: "生年月日", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Birthday"
        }

        return NSLocalizedString("Birthday", tableName: "Localization", bundle: bundle, value: "生年月日", comment: "")
      }

      /// Base translation: 生年月日を入力してください。
      ///
      /// Locales: Base
      static func pleaseEnterYourDateOfBirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Enter.Your.Date.Of.Birth", tableName: "Localization", bundle: hostingBundle, value: "生年月日を入力してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Enter.Your.Date.Of.Birth"
        }

        return NSLocalizedString("Please.Enter.Your.Date.Of.Birth", tableName: "Localization", bundle: bundle, value: "生年月日を入力してください。", comment: "")
      }

      /// Base translation: 申請者は不合格
      ///
      /// Locales: Base
      static func applicantFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Applicant.Failed", tableName: "Localization", bundle: hostingBundle, value: "申請者は不合格", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Applicant.Failed"
        }

        return NSLocalizedString("Applicant.Failed", tableName: "Localization", bundle: bundle, value: "申請者は不合格", comment: "")
      }

      /// Base translation: 申込む
      ///
      /// Locales: Base
      static func subscriptionApplyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscription.Apply.Title", tableName: "Localization", bundle: hostingBundle, value: "申込む", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Subscription.Apply.Title"
        }

        return NSLocalizedString("Subscription.Apply.Title", tableName: "Localization", bundle: bundle, value: "申込む", comment: "")
      }

      /// Base translation: 男
      ///
      /// Locales: Base
      static func male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Male", tableName: "Localization", bundle: hostingBundle, value: "男", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Male"
        }

        return NSLocalizedString("Male", tableName: "Localization", bundle: bundle, value: "男", comment: "")
      }

      /// Base translation: 番地を入力してください。
      ///
      /// Locales: Base
      static func pleaseEnterTheAddressName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Enter.The.Address.Name", tableName: "Localization", bundle: hostingBundle, value: "番地を入力してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Enter.The.Address.Name"
        }

        return NSLocalizedString("Please.Enter.The.Address.Name", tableName: "Localization", bundle: bundle, value: "番地を入力してください。", comment: "")
      }

      /// Base translation: 登録する
      ///
      /// Locales: Base
      static func register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Register", tableName: "Localization", bundle: hostingBundle, value: "登録する", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Register"
        }

        return NSLocalizedString("Register", tableName: "Localization", bundle: bundle, value: "登録する", comment: "")
      }

      /// Base translation: 登録完了
      ///
      /// Locales: Base
      static func completionOfRegistration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Completion.Of.Registration", tableName: "Localization", bundle: hostingBundle, value: "登録完了", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Completion.Of.Registration"
        }

        return NSLocalizedString("Completion.Of.Registration", tableName: "Localization", bundle: bundle, value: "登録完了", comment: "")
      }

      /// Base translation: 確認画面へ進む
      ///
      /// Locales: Base
      static func proceedToConfirmationScreen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Proceed.To.Confirmation.Screen", tableName: "Localization", bundle: hostingBundle, value: "確認画面へ進む", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Proceed.To.Confirmation.Screen"
        }

        return NSLocalizedString("Proceed.To.Confirmation.Screen", tableName: "Localization", bundle: bundle, value: "確認画面へ進む", comment: "")
      }

      /// Base translation: 答えを選択してください
      ///
      /// Locales: Base
      static func requiredAnswer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Required.Answer", tableName: "Localization", bundle: hostingBundle, value: "答えを選択してください", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Required.Answer"
        }

        return NSLocalizedString("Required.Answer", tableName: "Localization", bundle: bundle, value: "答えを選択してください", comment: "")
      }

      /// Base translation: 興味のあるカテゴリーを選択してください
      ///
      /// Locales: Base
      static func pleaseSelectTheCategoryYouAreInterestedIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Select.The.Category.You.Are.Interested.In", tableName: "Localization", bundle: hostingBundle, value: "興味のあるカテゴリーを選択してください", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Select.The.Category.You.Are.Interested.In"
        }

        return NSLocalizedString("Please.Select.The.Category.You.Are.Interested.In", tableName: "Localization", bundle: bundle, value: "興味のあるカテゴリーを選択してください", comment: "")
      }

      /// Base translation: 興味のあるタグを選択してください
      ///
      /// Locales: Base
      static func selectTagsOfInterest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select.Tags.Of.Interest", tableName: "Localization", bundle: hostingBundle, value: "興味のあるタグを選択してください", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Select.Tags.Of.Interest"
        }

        return NSLocalizedString("Select.Tags.Of.Interest", tableName: "Localization", bundle: bundle, value: "興味のあるタグを選択してください", comment: "")
      }

      /// Base translation: 解約する
      ///
      /// Locales: Base
      static func subscriptionCancelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscription.Cancel.Title", tableName: "Localization", bundle: hostingBundle, value: "解約する", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Subscription.Cancel.Title"
        }

        return NSLocalizedString("Subscription.Cancel.Title", tableName: "Localization", bundle: bundle, value: "解約する", comment: "")
      }

      /// Base translation: 認証番号
      ///
      /// Locales: Base
      static func otpAuthenStringTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPAuthen.String.Title", tableName: "Localization", bundle: hostingBundle, value: "認証番号", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "OTPAuthen.String.Title"
        }

        return NSLocalizedString("OTPAuthen.String.Title", tableName: "Localization", bundle: bundle, value: "認証番号", comment: "")
      }

      /// Base translation: 認証番号(4桁)
      ///
      /// Locales: Base
      static func otpAuthenFieldContent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPAuthen.Field.Content", tableName: "Localization", bundle: hostingBundle, value: "認証番号(4桁)", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "OTPAuthen.Field.Content"
        }

        return NSLocalizedString("OTPAuthen.Field.Content", tableName: "Localization", bundle: bundle, value: "認証番号(4桁)", comment: "")
      }

      /// Base translation: 認証番号を送信
      ///
      /// Locales: Base
      static func otpAuthenButtonVerify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTPAuthen.Button.Verify", tableName: "Localization", bundle: hostingBundle, value: "認証番号を送信", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "OTPAuthen.Button.Verify"
        }

        return NSLocalizedString("OTPAuthen.Button.Verify", tableName: "Localization", bundle: bundle, value: "認証番号を送信", comment: "")
      }

      /// Base translation: 説明テキストが入ります説明テキストが入ります説明テキストが入ります
      ///
      /// Locales: Base
      static func recoverAccountPopupCompleted002(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RecoverAccount.Popup.Completed.002", tableName: "Localization", bundle: hostingBundle, value: "説明テキストが入ります説明テキストが入ります説明テキストが入ります", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "RecoverAccount.Popup.Completed.002"
        }

        return NSLocalizedString("RecoverAccount.Popup.Completed.002", tableName: "Localization", bundle: bundle, value: "説明テキストが入ります説明テキストが入ります説明テキストが入ります", comment: "")
      }

      /// Base translation: 退会
      ///
      /// Locales: Base
      static func unregisterStringTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unregister.String.Title", tableName: "Localization", bundle: hostingBundle, value: "退会", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Unregister.String.Title"
        }

        return NSLocalizedString("Unregister.String.Title", tableName: "Localization", bundle: bundle, value: "退会", comment: "")
      }

      /// Base translation: 退会する
      ///
      /// Locales: Base
      static func unregisterButtonString(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unregister.Button.String", tableName: "Localization", bundle: hostingBundle, value: "退会する", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Unregister.Button.String"
        }

        return NSLocalizedString("Unregister.Button.String", tableName: "Localization", bundle: bundle, value: "退会する", comment: "")
      }

      /// Base translation: 退会する場合はOKボタンを押してください
      ///
      /// Locales: Base
      static func unregisterPopupMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unregister.Popup.Message", tableName: "Localization", bundle: hostingBundle, value: "退会する場合はOKボタンを押してください", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Unregister.Popup.Message"
        }

        return NSLocalizedString("Unregister.Popup.Message", tableName: "Localization", bundle: bundle, value: "退会する場合はOKボタンを押してください", comment: "")
      }

      /// Base translation: 退会手続きの前にご確認ください
      ///
      /// Locales: Base
      static func unregisterStringVerify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unregister.String.Verify", tableName: "Localization", bundle: hostingBundle, value: "退会手続きの前にご確認ください", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Unregister.String.Verify"
        }

        return NSLocalizedString("Unregister.String.Verify", tableName: "Localization", bundle: bundle, value: "退会手続きの前にご確認ください", comment: "")
      }

      /// Base translation: 通知設定
      ///
      /// Locales: Base
      static func notifiSettingString001(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NotifiSetting.String.001", tableName: "Localization", bundle: hostingBundle, value: "通知設定", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "NotifiSetting.String.001"
        }

        return NSLocalizedString("NotifiSetting.String.001", tableName: "Localization", bundle: bundle, value: "通知設定", comment: "")
      }

      /// Base translation: 通知設定
      ///
      /// Locales: Base
      static func notificationSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notification.Settings", tableName: "Localization", bundle: hostingBundle, value: "通知設定", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Notification.Settings"
        }

        return NSLocalizedString("Notification.Settings", tableName: "Localization", bundle: bundle, value: "通知設定", comment: "")
      }

      /// Base translation: 郵便番号は%@文字でなければなりません
      ///
      /// Locales: Base
      static func zipcodeRequiredCharacters(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Zipcode.Required.Characters", tableName: "Localization", bundle: hostingBundle, value: "郵便番号は%@文字でなければなりません", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Zipcode.Required.Characters"
        }

        let format = NSLocalizedString("Zipcode.Required.Characters", tableName: "Localization", bundle: bundle, value: "郵便番号は%@文字でなければなりません", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: 郵便番号は%@文字でなければなりません。
      ///
      /// Locales: Base
      static func thePostalCodeMustBeXCharacters(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("The.Postal.Code.Must.Be.X.Characters", tableName: "Localization", bundle: hostingBundle, value: "郵便番号は%@文字でなければなりません。", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "The.Postal.Code.Must.Be.X.Characters"
        }

        let format = NSLocalizedString("The.Postal.Code.Must.Be.X.Characters", tableName: "Localization", bundle: bundle, value: "郵便番号は%@文字でなければなりません。", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: 郵便番号を入力してください。
      ///
      /// Locales: Base
      static func pleaseEnterYourZipcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Enter.Your.Zipcode", tableName: "Localization", bundle: hostingBundle, value: "郵便番号を入力してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Enter.Your.Zipcode"
        }

        return NSLocalizedString("Please.Enter.Your.Zipcode", tableName: "Localization", bundle: bundle, value: "郵便番号を入力してください。", comment: "")
      }

      /// Base translation: 郵便番号検索
      ///
      /// Locales: Base
      static func postCodeSearchEngine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post.Code.Search.Engine", tableName: "Localization", bundle: hostingBundle, value: "郵便番号検索", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Post.Code.Search.Engine"
        }

        return NSLocalizedString("Post.Code.Search.Engine", tableName: "Localization", bundle: bundle, value: "郵便番号検索", comment: "")
      }

      /// Base translation: 都道府県
      ///
      /// Locales: Base
      static func prefectures(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Prefectures", tableName: "Localization", bundle: hostingBundle, value: "都道府県", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Prefectures"
        }

        return NSLocalizedString("Prefectures", tableName: "Localization", bundle: bundle, value: "都道府県", comment: "")
      }

      /// Base translation: 都道府県を選択してください。
      ///
      /// Locales: Base
      static func selectThePrefecture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select.The.Prefecture", tableName: "Localization", bundle: hostingBundle, value: "都道府県を選択してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Select.The.Prefecture"
        }

        return NSLocalizedString("Select.The.Prefecture", tableName: "Localization", bundle: bundle, value: "都道府県を選択してください。", comment: "")
      }

      /// Base translation: 閉じる
      ///
      /// Locales: Base
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Close", tableName: "Localization", bundle: hostingBundle, value: "閉じる", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Close"
        }

        return NSLocalizedString("Close", tableName: "Localization", bundle: bundle, value: "閉じる", comment: "")
      }

      /// Base translation: 閉じる
      ///
      /// Locales: Base
      static func magazineStringClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Magazine.String.Close", tableName: "Localization", bundle: hostingBundle, value: "閉じる", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Magazine.String.Close"
        }

        return NSLocalizedString("Magazine.String.Close", tableName: "Localization", bundle: bundle, value: "閉じる", comment: "")
      }

      /// Base translation: 雑誌購読者プレゼント
      ///
      /// Locales: Base
      static func giftLabelSubscriber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gift.Label.Subscriber", tableName: "Localization", bundle: hostingBundle, value: "雑誌購読者プレゼント", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Gift.Label.Subscriber"
        }

        return NSLocalizedString("Gift.Label.Subscriber", tableName: "Localization", bundle: bundle, value: "雑誌購読者プレゼント", comment: "")
      }

      /// Base translation: 電話番号
      ///
      /// Locales: Base
      static func phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Phone.Number", tableName: "Localization", bundle: hostingBundle, value: "電話番号", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Phone.Number"
        }

        return NSLocalizedString("Phone.Number", tableName: "Localization", bundle: bundle, value: "電話番号", comment: "")
      }

      /// Base translation: 電話番号を入力してください。
      ///
      /// Locales: Base
      static func pleaseEnterAPhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please.Enter.A.Phone.Number", tableName: "Localization", bundle: hostingBundle, value: "電話番号を入力してください。", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Please.Enter.A.Phone.Number"
        }

        return NSLocalizedString("Please.Enter.A.Phone.Number", tableName: "Localization", bundle: bundle, value: "電話番号を入力してください。", comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HomeGiftTableViewCell.validate()
      try _HomeMagazineTableViewCell.validate()
      try _HomeNotificationTableViewCell.validate()
      try _HomeTableViewHeaderView.validate()
      try _NotificationTableViewCell.validate()
      try _VideoChannelCollectionViewCell.validate()
      try _VideoHeaderView.validate()
      try _VideoTableViewCell.validate()
    }

    struct _CategoryCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CategoryCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "CategoryCollectionViewCellID"
      let name = "CategoryCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _DetailGiftSupplementaryTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DetailGiftSupplementaryTableViewCell

      let bundle = R.hostingBundle
      let identifier = "DetailGiftSupplementaryTableViewCellID"
      let name = "DetailGiftSupplementaryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailGiftSupplementaryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailGiftSupplementaryTableViewCell
      }

      fileprivate init() {}
    }

    struct _DetailGiftViewFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailGiftViewFooterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailGiftViewFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailGiftViewFooterView
      }

      fileprivate init() {}
    }

    struct _DetailGiftViewHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailGiftViewHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailGiftViewHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailGiftViewHeaderView
      }

      fileprivate init() {}
    }

    struct _GiftTableViewHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GiftTableViewHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GiftTableViewHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GiftTableViewHeaderView
      }

      fileprivate init() {}
    }

    struct _HomeGiftTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeGiftTableViewCell

      let bundle = R.hostingBundle
      let identifier = "HomeGiftTableViewCellID"
      let name = "HomeGiftTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeGiftTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeGiftTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "video_thumbnail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_thumbnail' is used in nib 'HomeGiftTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeMagazineTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeMagazineTableViewCell

      let bundle = R.hostingBundle
      let identifier = "HomeMagazineTableViewCellID"
      let name = "HomeMagazineTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeMagazineTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeMagazineTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "favourite_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favourite_icon' is used in nib 'HomeMagazineTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like_icon' is used in nib 'HomeMagazineTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play-icon' is used in nib 'HomeMagazineTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_thumbnail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_thumbnail' is used in nib 'HomeMagazineTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeNotificationTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeNotificationTableViewCell

      let bundle = R.hostingBundle
      let identifier = "HomeNotificationTableViewCellID"
      let name = "HomeNotificationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeNotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeNotificationTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "accessory_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'accessory_icon' is used in nib 'HomeNotificationTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeTableViewHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeTableViewHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTableViewHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTableViewHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "gift_tab_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gift_tab_icon' is used in nib 'HomeTableViewHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MagazineTabCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MagazineTabCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MagazineTabCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MagazineTabCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _MyMenu2TableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyMenu2TableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyMenu2TableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyMenu2TableViewCell
      }

      fileprivate init() {}
    }

    struct _NotificationTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NotificationTableViewCell

      let bundle = R.hostingBundle
      let identifier = "NotificationTableViewCellID"
      let name = "NotificationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "accessory_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'accessory_icon' is used in nib 'NotificationTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PointBalanceTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PointBalanceTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PointBalanceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PointBalanceTableViewCell
      }

      fileprivate init() {}
    }

    struct _PointHistoryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PointHistoryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PointHistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PointHistoryTableViewCell
      }

      fileprivate init() {}
    }

    struct _UserInfoOptionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserInfoOptionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInfoOptionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInfoOptionTableViewCell
      }

      fileprivate init() {}
    }

    struct _VideoCategoryView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoCategoryView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCategoryView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCategoryView
      }

      fileprivate init() {}
    }

    struct _VideoChannelCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VideoChannelCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "VideoChannelCollectionViewCellID"
      let name = "VideoChannelCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoChannelCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoChannelCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "accessory_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'accessory_icon' is used in nib 'VideoChannelCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_channel_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_channel_icon' is used in nib 'VideoChannelCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VideoHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "video_channel_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_channel_icon' is used in nib 'VideoHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VideoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VideoTableViewCell

      let bundle = R.hostingBundle
      let identifier = "VideoTableViewCellID"
      let name = "VideoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "favourite_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favourite_icon' is used in nib 'VideoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like_icon' is used in nib 'VideoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play-icon' is used in nib 'VideoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ranking_top1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ranking_top1' is used in nib 'VideoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_thumbnail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_thumbnail' is used in nib 'VideoTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try category.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try coming.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try customAlert.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try gift.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try magazine.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try magazineSubscription.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try myMenu.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try notification.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try point.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try presentApplication.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try registration.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try setting.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try shopping.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try splash.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try startup.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try video.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try wellness.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct category: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CategorySettingViewController

      let bundle = R.hostingBundle
      let categorySettingViewController = StoryboardViewControllerResource<CategorySettingViewController>(identifier: "CategorySettingViewController")
      let name = "Category"

      func categorySettingViewController(_: Void = ()) -> CategorySettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categorySettingViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.category().categorySettingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categorySettingViewController' could not be loaded from storyboard 'Category' as 'CategorySettingViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct coming: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ComingSoonViewController

      let bundle = R.hostingBundle
      let comingSoonViewController = StoryboardViewControllerResource<ComingSoonViewController>(identifier: "ComingSoonViewController")
      let name = "Coming"

      func comingSoonViewController(_: Void = ()) -> ComingSoonViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: comingSoonViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.coming().comingSoonViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'comingSoonViewController' could not be loaded from storyboard 'Coming' as 'ComingSoonViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct customAlert: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CustomAlertViewController

      let bundle = R.hostingBundle
      let customAlertViewController = StoryboardViewControllerResource<CustomAlertViewController>(identifier: "CustomAlertViewController")
      let name = "CustomAlert"

      func customAlertViewController(_: Void = ()) -> CustomAlertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customAlertViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.customAlert().customAlertViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customAlertViewController' could not be loaded from storyboard 'CustomAlert' as 'CustomAlertViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct gift: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailGiftViewController = StoryboardViewControllerResource<DetailGiftViewController>(identifier: "DetailGiftViewController")
      let giftViewController = StoryboardViewControllerResource<GiftViewController>(identifier: "GiftViewController")
      let name = "Gift"

      func detailGiftViewController(_: Void = ()) -> DetailGiftViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailGiftViewController)
      }

      func giftViewController(_: Void = ()) -> GiftViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: giftViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.gift().detailGiftViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailGiftViewController' could not be loaded from storyboard 'Gift' as 'DetailGiftViewController'.") }
        if _R.storyboard.gift().giftViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'giftViewController' could not be loaded from storyboard 'Gift' as 'GiftViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Home"

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct magazine: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let contentMagazineViewController = StoryboardViewControllerResource<ContentMagazineViewController>(identifier: "ContentMagazineViewController")
      let detailMagazineViewController = StoryboardViewControllerResource<DetailMagazineViewController>(identifier: "DetailMagazineViewController")
      let grantPointPopup = StoryboardViewControllerResource<GrantPointPopup>(identifier: "GrantPointPopup")
      let magazineViewController = StoryboardViewControllerResource<MagazineViewController>(identifier: "MagazineViewController")
      let name = "Magazine"

      func contentMagazineViewController(_: Void = ()) -> ContentMagazineViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contentMagazineViewController)
      }

      func detailMagazineViewController(_: Void = ()) -> DetailMagazineViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailMagazineViewController)
      }

      func grantPointPopup(_: Void = ()) -> GrantPointPopup? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: grantPointPopup)
      }

      func magazineViewController(_: Void = ()) -> MagazineViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: magazineViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "favourite_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favourite_icon' is used in storyboard 'Magazine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "good_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'good_icon' is used in storyboard 'Magazine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "grant_point_alert", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'grant_point_alert' is used in storyboard 'Magazine', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.magazine().contentMagazineViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contentMagazineViewController' could not be loaded from storyboard 'Magazine' as 'ContentMagazineViewController'.") }
        if _R.storyboard.magazine().detailMagazineViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailMagazineViewController' could not be loaded from storyboard 'Magazine' as 'DetailMagazineViewController'.") }
        if _R.storyboard.magazine().grantPointPopup() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'grantPointPopup' could not be loaded from storyboard 'Magazine' as 'GrantPointPopup'.") }
        if _R.storyboard.magazine().magazineViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'magazineViewController' could not be loaded from storyboard 'Magazine' as 'MagazineViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct magazineSubscription: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let magazineSubscriptionTableViewController = StoryboardViewControllerResource<MagazineSubscriptionTableViewController>(identifier: "MagazineSubscriptionTableViewController")
      let magazineSubscriptionViewController = StoryboardViewControllerResource<MagazineSubscriptionViewController>(identifier: "MagazineSubscriptionViewController")
      let name = "MagazineSubscription"

      func magazineSubscriptionTableViewController(_: Void = ()) -> MagazineSubscriptionTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: magazineSubscriptionTableViewController)
      }

      func magazineSubscriptionViewController(_: Void = ()) -> MagazineSubscriptionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: magazineSubscriptionViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "magazine-intro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'magazine-intro' is used in storyboard 'MagazineSubscription', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.magazineSubscription().magazineSubscriptionTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'magazineSubscriptionTableViewController' could not be loaded from storyboard 'MagazineSubscription' as 'MagazineSubscriptionTableViewController'.") }
        if _R.storyboard.magazineSubscription().magazineSubscriptionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'magazineSubscriptionViewController' could not be loaded from storyboard 'MagazineSubscription' as 'MagazineSubscriptionViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct myMenu: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyMenuViewController

      let bundle = R.hostingBundle
      let changePersonalInfoDoneViewController = StoryboardViewControllerResource<ChangePersonalInfoDoneViewController>(identifier: "ChangePersonalInfoDoneViewController")
      let changePersonalInfoSummaryTableViewController = StoryboardViewControllerResource<ChangePersonalInfoSummaryTableViewController>(identifier: "ChangePersonalInfoSummaryTableViewController")
      let changePersonalInfoSummaryViewController = StoryboardViewControllerResource<ChangePersonalInfoSummaryViewController>(identifier: "ChangePersonalInfoSummaryViewController")
      let changePersonalInfoTableViewController = StoryboardViewControllerResource<ChangePersonalInfoTableViewController>(identifier: "ChangePersonalInfoTableViewController")
      let changePersonalInfoViewController = StoryboardViewControllerResource<ChangePersonalInfoViewController>(identifier: "ChangePersonalInfoViewController")
      let changeUserInfoOptionViewController = StoryboardViewControllerResource<ChangeUserInfoOptionViewController>(identifier: "ChangeUserInfoOptionViewController")
      let dataTransferViewController = StoryboardViewControllerResource<DataTransferViewController>(identifier: "DataTransferViewController")
      let myMenuViewController = StoryboardViewControllerResource<MyMenuViewController>(identifier: "MyMenuViewController")
      let name = "MyMenu"
      let passwordGenerationViewController = StoryboardViewControllerResource<PasswordGenerationViewController>(identifier: "PasswordGenerationViewController")
      let termsViewController = StoryboardViewControllerResource<TermsViewController>(identifier: "TermsViewController")

      func changePersonalInfoDoneViewController(_: Void = ()) -> ChangePersonalInfoDoneViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePersonalInfoDoneViewController)
      }

      func changePersonalInfoSummaryTableViewController(_: Void = ()) -> ChangePersonalInfoSummaryTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePersonalInfoSummaryTableViewController)
      }

      func changePersonalInfoSummaryViewController(_: Void = ()) -> ChangePersonalInfoSummaryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePersonalInfoSummaryViewController)
      }

      func changePersonalInfoTableViewController(_: Void = ()) -> ChangePersonalInfoTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePersonalInfoTableViewController)
      }

      func changePersonalInfoViewController(_: Void = ()) -> ChangePersonalInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePersonalInfoViewController)
      }

      func changeUserInfoOptionViewController(_: Void = ()) -> ChangeUserInfoOptionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changeUserInfoOptionViewController)
      }

      func dataTransferViewController(_: Void = ()) -> DataTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dataTransferViewController)
      }

      func myMenuViewController(_: Void = ()) -> MyMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myMenuViewController)
      }

      func passwordGenerationViewController(_: Void = ()) -> PasswordGenerationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passwordGenerationViewController)
      }

      func termsViewController(_: Void = ()) -> TermsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "magazine-intro1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'magazine-intro1' is used in storyboard 'MyMenu', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.myMenu().changePersonalInfoDoneViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePersonalInfoDoneViewController' could not be loaded from storyboard 'MyMenu' as 'ChangePersonalInfoDoneViewController'.") }
        if _R.storyboard.myMenu().changePersonalInfoSummaryTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePersonalInfoSummaryTableViewController' could not be loaded from storyboard 'MyMenu' as 'ChangePersonalInfoSummaryTableViewController'.") }
        if _R.storyboard.myMenu().changePersonalInfoSummaryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePersonalInfoSummaryViewController' could not be loaded from storyboard 'MyMenu' as 'ChangePersonalInfoSummaryViewController'.") }
        if _R.storyboard.myMenu().changePersonalInfoTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePersonalInfoTableViewController' could not be loaded from storyboard 'MyMenu' as 'ChangePersonalInfoTableViewController'.") }
        if _R.storyboard.myMenu().changePersonalInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePersonalInfoViewController' could not be loaded from storyboard 'MyMenu' as 'ChangePersonalInfoViewController'.") }
        if _R.storyboard.myMenu().changeUserInfoOptionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changeUserInfoOptionViewController' could not be loaded from storyboard 'MyMenu' as 'ChangeUserInfoOptionViewController'.") }
        if _R.storyboard.myMenu().dataTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dataTransferViewController' could not be loaded from storyboard 'MyMenu' as 'DataTransferViewController'.") }
        if _R.storyboard.myMenu().myMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myMenuViewController' could not be loaded from storyboard 'MyMenu' as 'MyMenuViewController'.") }
        if _R.storyboard.myMenu().passwordGenerationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passwordGenerationViewController' could not be loaded from storyboard 'MyMenu' as 'PasswordGenerationViewController'.") }
        if _R.storyboard.myMenu().termsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsViewController' could not be loaded from storyboard 'MyMenu' as 'TermsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct notification: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailNotificationViewController = StoryboardViewControllerResource<DetailNotificationViewController>(identifier: "DetailNotificationViewController")
      let name = "Notification"
      let notificationListViewController = StoryboardViewControllerResource<NotificationListViewController>(identifier: "NotificationListViewController")

      func detailNotificationViewController(_: Void = ()) -> DetailNotificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailNotificationViewController)
      }

      func notificationListViewController(_: Void = ()) -> NotificationListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationListViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.notification().detailNotificationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailNotificationViewController' could not be loaded from storyboard 'Notification' as 'DetailNotificationViewController'.") }
        if _R.storyboard.notification().notificationListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationListViewController' could not be loaded from storyboard 'Notification' as 'NotificationListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct point: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PointViewController

      let bundle = R.hostingBundle
      let name = "Point"
      let pointViewController = StoryboardViewControllerResource<PointViewController>(identifier: "PointViewController")
      let qrScannerViewController = StoryboardViewControllerResource<QRScannerViewController>(identifier: "QRScannerViewController")

      func pointViewController(_: Void = ()) -> PointViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pointViewController)
      }

      func qrScannerViewController(_: Void = ()) -> QRScannerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qrScannerViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.point().pointViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pointViewController' could not be loaded from storyboard 'Point' as 'PointViewController'.") }
        if _R.storyboard.point().qrScannerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qrScannerViewController' could not be loaded from storyboard 'Point' as 'QRScannerViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct presentApplication: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PresentApplication"
      let presentApplicationDoneViewController = StoryboardViewControllerResource<PresentApplicationDoneViewController>(identifier: "PresentApplicationDoneViewController")
      let presentApplicationSummaryTableViewController = StoryboardViewControllerResource<PresentApplicationSummaryTableViewController>(identifier: "PresentApplicationSummaryTableViewController")
      let presentApplicationSummaryViewController = StoryboardViewControllerResource<PresentApplicationSummaryViewController>(identifier: "PresentApplicationSummaryViewController")
      let presentApplicationTableViewController = StoryboardViewControllerResource<PresentApplicationTableViewController>(identifier: "PresentApplicationTableViewController")
      let presentApplicationViewController = StoryboardViewControllerResource<PresentApplicationViewController>(identifier: "PresentApplicationViewController")

      func presentApplicationDoneViewController(_: Void = ()) -> PresentApplicationDoneViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentApplicationDoneViewController)
      }

      func presentApplicationSummaryTableViewController(_: Void = ()) -> PresentApplicationSummaryTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentApplicationSummaryTableViewController)
      }

      func presentApplicationSummaryViewController(_: Void = ()) -> PresentApplicationSummaryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentApplicationSummaryViewController)
      }

      func presentApplicationTableViewController(_: Void = ()) -> PresentApplicationTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentApplicationTableViewController)
      }

      func presentApplicationViewController(_: Void = ()) -> PresentApplicationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentApplicationViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.presentApplication().presentApplicationDoneViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentApplicationDoneViewController' could not be loaded from storyboard 'PresentApplication' as 'PresentApplicationDoneViewController'.") }
        if _R.storyboard.presentApplication().presentApplicationSummaryTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentApplicationSummaryTableViewController' could not be loaded from storyboard 'PresentApplication' as 'PresentApplicationSummaryTableViewController'.") }
        if _R.storyboard.presentApplication().presentApplicationSummaryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentApplicationSummaryViewController' could not be loaded from storyboard 'PresentApplication' as 'PresentApplicationSummaryViewController'.") }
        if _R.storyboard.presentApplication().presentApplicationTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentApplicationTableViewController' could not be loaded from storyboard 'PresentApplication' as 'PresentApplicationTableViewController'.") }
        if _R.storyboard.presentApplication().presentApplicationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentApplicationViewController' could not be loaded from storyboard 'PresentApplication' as 'PresentApplicationViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct registration: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let firstViewController = StoryboardViewControllerResource<FirstViewController>(identifier: "FirstViewController")
      let name = "Registration"
      let otpAuthenticationPopupCompleted = StoryboardViewControllerResource<OTPAuthenticationPopupCompleted>(identifier: "OTPAuthenticationPopupCompleted")
      let otpAuthenticationViewController = StoryboardViewControllerResource<OTPAuthenticationViewController>(identifier: "OTPAuthenticationViewController")
      let recoverAccountViewController = StoryboardViewControllerResource<RecoverAccountViewController>(identifier: "RecoverAccountViewController")
      let smsAuthenticationViewController = StoryboardViewControllerResource<SMSAuthenticationViewController>(identifier: "SMSAuthenticationViewController")
      let unregisterViewController = StoryboardViewControllerResource<UnregisterViewController>(identifier: "UnregisterViewController")

      func firstViewController(_: Void = ()) -> FirstViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: firstViewController)
      }

      func otpAuthenticationPopupCompleted(_: Void = ()) -> OTPAuthenticationPopupCompleted? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpAuthenticationPopupCompleted)
      }

      func otpAuthenticationViewController(_: Void = ()) -> OTPAuthenticationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpAuthenticationViewController)
      }

      func recoverAccountViewController(_: Void = ()) -> RecoverAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: recoverAccountViewController)
      }

      func smsAuthenticationViewController(_: Void = ()) -> SMSAuthenticationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: smsAuthenticationViewController)
      }

      func unregisterViewController(_: Void = ()) -> UnregisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: unregisterViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "splash_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_logo' is used in storyboard 'Registration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unregister_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unregister_icon' is used in storyboard 'Registration', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.registration().firstViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'firstViewController' could not be loaded from storyboard 'Registration' as 'FirstViewController'.") }
        if _R.storyboard.registration().otpAuthenticationPopupCompleted() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpAuthenticationPopupCompleted' could not be loaded from storyboard 'Registration' as 'OTPAuthenticationPopupCompleted'.") }
        if _R.storyboard.registration().otpAuthenticationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpAuthenticationViewController' could not be loaded from storyboard 'Registration' as 'OTPAuthenticationViewController'.") }
        if _R.storyboard.registration().recoverAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'recoverAccountViewController' could not be loaded from storyboard 'Registration' as 'RecoverAccountViewController'.") }
        if _R.storyboard.registration().smsAuthenticationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'smsAuthenticationViewController' could not be loaded from storyboard 'Registration' as 'SMSAuthenticationViewController'.") }
        if _R.storyboard.registration().unregisterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'unregisterViewController' could not be loaded from storyboard 'Registration' as 'UnregisterViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct setting: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Setting"
      let notificationSettingViewController = StoryboardViewControllerResource<NotificationSettingViewController>(identifier: "NotificationSettingViewController")

      func notificationSettingViewController(_: Void = ()) -> NotificationSettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationSettingViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.setting().notificationSettingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationSettingViewController' could not be loaded from storyboard 'Setting' as 'NotificationSettingViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct shopping: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Shopping"
      let shoppingViewController = StoryboardViewControllerResource<ShoppingViewController>(identifier: "ShoppingViewController")

      func shoppingViewController(_: Void = ()) -> ShoppingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shoppingViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.shopping().shoppingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shoppingViewController' could not be loaded from storyboard 'Shopping' as 'ShoppingViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct splash: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashViewController

      let bundle = R.hostingBundle
      let name = "Splash"
      let splashViewController = StoryboardViewControllerResource<SplashViewController>(identifier: "SplashViewController")

      func splashViewController(_: Void = ()) -> SplashViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "splash_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_logo' is used in storyboard 'Splash', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.splash().splashViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashViewController' could not be loaded from storyboard 'Splash' as 'SplashViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct startup: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Startup"
      let startupViewController = StoryboardViewControllerResource<StartupViewController>(identifier: "StartupViewController")

      func startupViewController(_: Void = ()) -> StartupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: startupViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Startup', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.startup().startupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'startupViewController' could not be loaded from storyboard 'Startup' as 'StartupViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct video: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let contentVideoViewController = StoryboardViewControllerResource<ContentVideoViewController>(identifier: "ContentVideoViewController")
      let detailVideoViewController = StoryboardViewControllerResource<DetailVideoViewController>(identifier: "DetailVideoViewController")
      let name = "Video"
      let videoViewController = StoryboardViewControllerResource<VideoViewController>(identifier: "VideoViewController")

      func contentVideoViewController(_: Void = ()) -> ContentVideoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contentVideoViewController)
      }

      func detailVideoViewController(_: Void = ()) -> DetailVideoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailVideoViewController)
      }

      func videoViewController(_: Void = ()) -> VideoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: videoViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "favourite_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favourite_icon' is used in storyboard 'Video', but couldn't be loaded.") }
        if UIKit.UIImage(named: "good_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'good_icon' is used in storyboard 'Video', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play-icon' is used in storyboard 'Video', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_channel_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_channel_icon' is used in storyboard 'Video', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_thumbnail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_thumbnail' is used in storyboard 'Video', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.video().contentVideoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contentVideoViewController' could not be loaded from storyboard 'Video' as 'ContentVideoViewController'.") }
        if _R.storyboard.video().detailVideoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailVideoViewController' could not be loaded from storyboard 'Video' as 'DetailVideoViewController'.") }
        if _R.storyboard.video().videoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'videoViewController' could not be loaded from storyboard 'Video' as 'VideoViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct wellness: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WellnessViewController

      let bundle = R.hostingBundle
      let name = "Wellness"
      let wellnessViewController = StoryboardViewControllerResource<WellnessViewController>(identifier: "WellnessViewController")

      func wellnessViewController(_: Void = ()) -> WellnessViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wellnessViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.wellness().wellnessViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wellnessViewController' could not be loaded from storyboard 'Wellness' as 'WellnessViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
